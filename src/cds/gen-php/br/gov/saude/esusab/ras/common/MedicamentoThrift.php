<?php
namespace br\gov\saude\esusab\ras\common;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MedicamentoThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'codigoCatmat',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'viaAdministracao',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'dose',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'doseUnica',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'usoContinuo',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'doseFrequenciaTipo',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        7 => array(
            'var' => 'doseFrequencia',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'doseFrequenciaQuantidade',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'doseFrequenciaUnidadeMedida',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        10 => array(
            'var' => 'dtInicioTratamento',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'duracaoTratamento',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'duracaoTratamentoMedida',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'quantidadeReceitada',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $codigoCatmat = null;
    /**
     * @var int
     */
    public $viaAdministracao = null;
    /**
     * @var string
     */
    public $dose = null;
    /**
     * @var bool
     */
    public $doseUnica = null;
    /**
     * @var bool
     */
    public $usoContinuo = null;
    /**
     * @var int
     */
    public $doseFrequenciaTipo = null;
    /**
     * @var string
     */
    public $doseFrequencia = null;
    /**
     * @var int
     */
    public $doseFrequenciaQuantidade = null;
    /**
     * @var int
     */
    public $doseFrequenciaUnidadeMedida = null;
    /**
     * @var int
     */
    public $dtInicioTratamento = null;
    /**
     * @var int
     */
    public $duracaoTratamento = null;
    /**
     * @var int
     */
    public $duracaoTratamentoMedida = null;
    /**
     * @var int
     */
    public $quantidadeReceitada = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['codigoCatmat'])) {
                $this->codigoCatmat = $vals['codigoCatmat'];
            }
            if (isset($vals['viaAdministracao'])) {
                $this->viaAdministracao = $vals['viaAdministracao'];
            }
            if (isset($vals['dose'])) {
                $this->dose = $vals['dose'];
            }
            if (isset($vals['doseUnica'])) {
                $this->doseUnica = $vals['doseUnica'];
            }
            if (isset($vals['usoContinuo'])) {
                $this->usoContinuo = $vals['usoContinuo'];
            }
            if (isset($vals['doseFrequenciaTipo'])) {
                $this->doseFrequenciaTipo = $vals['doseFrequenciaTipo'];
            }
            if (isset($vals['doseFrequencia'])) {
                $this->doseFrequencia = $vals['doseFrequencia'];
            }
            if (isset($vals['doseFrequenciaQuantidade'])) {
                $this->doseFrequenciaQuantidade = $vals['doseFrequenciaQuantidade'];
            }
            if (isset($vals['doseFrequenciaUnidadeMedida'])) {
                $this->doseFrequenciaUnidadeMedida = $vals['doseFrequenciaUnidadeMedida'];
            }
            if (isset($vals['dtInicioTratamento'])) {
                $this->dtInicioTratamento = $vals['dtInicioTratamento'];
            }
            if (isset($vals['duracaoTratamento'])) {
                $this->duracaoTratamento = $vals['duracaoTratamento'];
            }
            if (isset($vals['duracaoTratamentoMedida'])) {
                $this->duracaoTratamentoMedida = $vals['duracaoTratamentoMedida'];
            }
            if (isset($vals['quantidadeReceitada'])) {
                $this->quantidadeReceitada = $vals['quantidadeReceitada'];
            }
        }
    }

    public function getName()
    {
        return 'MedicamentoThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codigoCatmat);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->viaAdministracao);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dose);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->doseUnica);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->usoContinuo);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->doseFrequenciaTipo);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->doseFrequencia);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->doseFrequenciaQuantidade);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->doseFrequenciaUnidadeMedida);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->dtInicioTratamento);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->duracaoTratamento);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->duracaoTratamentoMedida);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->quantidadeReceitada);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MedicamentoThrift');
        if ($this->codigoCatmat !== null) {
            $xfer += $output->writeFieldBegin('codigoCatmat', TType::STRING, 1);
            $xfer += $output->writeString($this->codigoCatmat);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->viaAdministracao !== null) {
            $xfer += $output->writeFieldBegin('viaAdministracao', TType::I64, 2);
            $xfer += $output->writeI64($this->viaAdministracao);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dose !== null) {
            $xfer += $output->writeFieldBegin('dose', TType::STRING, 3);
            $xfer += $output->writeString($this->dose);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->doseUnica !== null) {
            $xfer += $output->writeFieldBegin('doseUnica', TType::BOOL, 4);
            $xfer += $output->writeBool($this->doseUnica);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->usoContinuo !== null) {
            $xfer += $output->writeFieldBegin('usoContinuo', TType::BOOL, 5);
            $xfer += $output->writeBool($this->usoContinuo);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->doseFrequenciaTipo !== null) {
            $xfer += $output->writeFieldBegin('doseFrequenciaTipo', TType::I64, 6);
            $xfer += $output->writeI64($this->doseFrequenciaTipo);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->doseFrequencia !== null) {
            $xfer += $output->writeFieldBegin('doseFrequencia', TType::STRING, 7);
            $xfer += $output->writeString($this->doseFrequencia);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->doseFrequenciaQuantidade !== null) {
            $xfer += $output->writeFieldBegin('doseFrequenciaQuantidade', TType::I32, 8);
            $xfer += $output->writeI32($this->doseFrequenciaQuantidade);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->doseFrequenciaUnidadeMedida !== null) {
            $xfer += $output->writeFieldBegin('doseFrequenciaUnidadeMedida', TType::I64, 9);
            $xfer += $output->writeI64($this->doseFrequenciaUnidadeMedida);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dtInicioTratamento !== null) {
            $xfer += $output->writeFieldBegin('dtInicioTratamento', TType::I64, 10);
            $xfer += $output->writeI64($this->dtInicioTratamento);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duracaoTratamento !== null) {
            $xfer += $output->writeFieldBegin('duracaoTratamento', TType::I32, 11);
            $xfer += $output->writeI32($this->duracaoTratamento);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duracaoTratamentoMedida !== null) {
            $xfer += $output->writeFieldBegin('duracaoTratamentoMedida', TType::I64, 12);
            $xfer += $output->writeI64($this->duracaoTratamentoMedida);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->quantidadeReceitada !== null) {
            $xfer += $output->writeFieldBegin('quantidadeReceitada', TType::I32, 13);
            $xfer += $output->writeI32($this->quantidadeReceitada);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
