<?php
namespace br\gov\saude\esusab\ras\common;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class HeaderCdsCadastroThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'cnesUnidadeSaude',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'cnsProfissional',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'codigoIbgeMunicipio',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'dataAtendimento',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'ineEquipe',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'microarea',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var string
     */
    public $cnesUnidadeSaude = null;
    /**
     * @var string
     */
    public $cnsProfissional = null;
    /**
     * @var string
     */
    public $codigoIbgeMunicipio = null;
    /**
     * @var int
     */
    public $dataAtendimento = null;
    /**
     * @var string
     */
    public $ineEquipe = null;
    /**
     * @var int
     */
    public $microarea = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['cnesUnidadeSaude'])) {
                $this->cnesUnidadeSaude = $vals['cnesUnidadeSaude'];
            }
            if (isset($vals['cnsProfissional'])) {
                $this->cnsProfissional = $vals['cnsProfissional'];
            }
            if (isset($vals['codigoIbgeMunicipio'])) {
                $this->codigoIbgeMunicipio = $vals['codigoIbgeMunicipio'];
            }
            if (isset($vals['dataAtendimento'])) {
                $this->dataAtendimento = $vals['dataAtendimento'];
            }
            if (isset($vals['ineEquipe'])) {
                $this->ineEquipe = $vals['ineEquipe'];
            }
            if (isset($vals['microarea'])) {
                $this->microarea = $vals['microarea'];
            }
        }
    }

    public function getName()
    {
        return 'HeaderCdsCadastroThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cnesUnidadeSaude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cnsProfissional);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codigoIbgeMunicipio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->dataAtendimento);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ineEquipe);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->microarea);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('HeaderCdsCadastroThrift');
        if ($this->cnesUnidadeSaude !== null) {
            $xfer += $output->writeFieldBegin('cnesUnidadeSaude', TType::STRING, 1);
            $xfer += $output->writeString($this->cnesUnidadeSaude);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cnsProfissional !== null) {
            $xfer += $output->writeFieldBegin('cnsProfissional', TType::STRING, 2);
            $xfer += $output->writeString($this->cnsProfissional);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codigoIbgeMunicipio !== null) {
            $xfer += $output->writeFieldBegin('codigoIbgeMunicipio', TType::STRING, 3);
            $xfer += $output->writeString($this->codigoIbgeMunicipio);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataAtendimento !== null) {
            $xfer += $output->writeFieldBegin('dataAtendimento', TType::I64, 4);
            $xfer += $output->writeI64($this->dataAtendimento);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ineEquipe !== null) {
            $xfer += $output->writeFieldBegin('ineEquipe', TType::STRING, 5);
            $xfer += $output->writeString($this->ineEquipe);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->microarea !== null) {
            $xfer += $output->writeFieldBegin('microarea', TType::I64, 6);
            $xfer += $output->writeI64($this->microarea);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
