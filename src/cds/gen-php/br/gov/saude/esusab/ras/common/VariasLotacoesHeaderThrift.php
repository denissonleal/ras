<?php
namespace br\gov\saude\esusab\ras\common;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class VariasLotacoesHeaderThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        6 => array(
            'var' => 'lotacaoFormPrincipal',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\common\LotacaoHeaderThrift',
        ),
        7 => array(
            'var' => 'lotacaoFormAtendimentoCompartilhado',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\common\LotacaoHeaderThrift',
        ),
        8 => array(
            'var' => 'dataAtendimento',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        9 => array(
            'var' => 'codigoIbgeMunicipio',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \br\gov\saude\esusab\ras\common\LotacaoHeaderThrift
     */
    public $lotacaoFormPrincipal = null;
    /**
     * @var \br\gov\saude\esusab\ras\common\LotacaoHeaderThrift
     */
    public $lotacaoFormAtendimentoCompartilhado = null;
    /**
     * @var int
     */
    public $dataAtendimento = null;
    /**
     * @var string
     */
    public $codigoIbgeMunicipio = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['lotacaoFormPrincipal'])) {
                $this->lotacaoFormPrincipal = $vals['lotacaoFormPrincipal'];
            }
            if (isset($vals['lotacaoFormAtendimentoCompartilhado'])) {
                $this->lotacaoFormAtendimentoCompartilhado = $vals['lotacaoFormAtendimentoCompartilhado'];
            }
            if (isset($vals['dataAtendimento'])) {
                $this->dataAtendimento = $vals['dataAtendimento'];
            }
            if (isset($vals['codigoIbgeMunicipio'])) {
                $this->codigoIbgeMunicipio = $vals['codigoIbgeMunicipio'];
            }
        }
    }

    public function getName()
    {
        return 'VariasLotacoesHeaderThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->lotacaoFormPrincipal = new \br\gov\saude\esusab\ras\common\LotacaoHeaderThrift();
                        $xfer += $this->lotacaoFormPrincipal->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->lotacaoFormAtendimentoCompartilhado = new \br\gov\saude\esusab\ras\common\LotacaoHeaderThrift();
                        $xfer += $this->lotacaoFormAtendimentoCompartilhado->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->dataAtendimento);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codigoIbgeMunicipio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('VariasLotacoesHeaderThrift');
        if ($this->lotacaoFormPrincipal !== null) {
            if (!is_object($this->lotacaoFormPrincipal)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('lotacaoFormPrincipal', TType::STRUCT, 6);
            $xfer += $this->lotacaoFormPrincipal->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lotacaoFormAtendimentoCompartilhado !== null) {
            if (!is_object($this->lotacaoFormAtendimentoCompartilhado)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('lotacaoFormAtendimentoCompartilhado', TType::STRUCT, 7);
            $xfer += $this->lotacaoFormAtendimentoCompartilhado->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataAtendimento !== null) {
            $xfer += $output->writeFieldBegin('dataAtendimento', TType::I64, 8);
            $xfer += $output->writeI64($this->dataAtendimento);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codigoIbgeMunicipio !== null) {
            $xfer += $output->writeFieldBegin('codigoIbgeMunicipio', TType::STRING, 9);
            $xfer += $output->writeString($this->codigoIbgeMunicipio);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
