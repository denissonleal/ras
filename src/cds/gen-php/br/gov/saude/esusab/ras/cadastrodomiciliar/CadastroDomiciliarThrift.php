<?php
namespace br\gov\saude\esusab\ras\cadastrodomiciliar;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CadastroDomiciliarThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'animaisNoDomicilio',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
        2 => array(
            'var' => 'condicaoMoradia',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\cadastrodomiciliar\CondicaoMoradiaThrift',
        ),
        4 => array(
            'var' => 'enderecoLocalPermanencia',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\common\EnderecoLocalPermanenciaThrift',
        ),
        5 => array(
            'var' => 'familias',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\br\gov\saude\esusab\ras\cadastrodomiciliar\FamiliaRowThrift',
                ),
        ),
        6 => array(
            'var' => 'fichaAtualizada',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'quantosAnimaisNoDomicilio',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'stAnimaisNoDomicilio',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'statusTermoRecusa',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'tpCdsOrigem',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'uuid',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'uuidFichaOriginadora',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'tipoDeImovel',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        14 => array(
            'var' => 'instituicaoPermanencia',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\cadastrodomiciliar\InstituicaoPermanenciaThrift',
        ),
        15 => array(
            'var' => 'headerTransport',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift',
        ),
        16 => array(
            'var' => 'statusGeradoAutomaticamente',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int[]
     */
    public $animaisNoDomicilio = null;
    /**
     * @var \br\gov\saude\esusab\ras\cadastrodomiciliar\CondicaoMoradiaThrift
     */
    public $condicaoMoradia = null;
    /**
     * @var \br\gov\saude\esusab\ras\common\EnderecoLocalPermanenciaThrift
     */
    public $enderecoLocalPermanencia = null;
    /**
     * @var \br\gov\saude\esusab\ras\cadastrodomiciliar\FamiliaRowThrift[]
     */
    public $familias = null;
    /**
     * @var bool
     */
    public $fichaAtualizada = null;
    /**
     * @var string
     */
    public $quantosAnimaisNoDomicilio = null;
    /**
     * @var bool
     */
    public $stAnimaisNoDomicilio = null;
    /**
     * @var bool
     */
    public $statusTermoRecusa = null;
    /**
     * @var int
     */
    public $tpCdsOrigem = null;
    /**
     * @var string
     */
    public $uuid = null;
    /**
     * @var string
     */
    public $uuidFichaOriginadora = null;
    /**
     * @var int
     */
    public $tipoDeImovel = null;
    /**
     * @var \br\gov\saude\esusab\ras\cadastrodomiciliar\InstituicaoPermanenciaThrift
     */
    public $instituicaoPermanencia = null;
    /**
     * @var \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift
     */
    public $headerTransport = null;
    /**
     * @var bool
     */
    public $statusGeradoAutomaticamente = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['animaisNoDomicilio'])) {
                $this->animaisNoDomicilio = $vals['animaisNoDomicilio'];
            }
            if (isset($vals['condicaoMoradia'])) {
                $this->condicaoMoradia = $vals['condicaoMoradia'];
            }
            if (isset($vals['enderecoLocalPermanencia'])) {
                $this->enderecoLocalPermanencia = $vals['enderecoLocalPermanencia'];
            }
            if (isset($vals['familias'])) {
                $this->familias = $vals['familias'];
            }
            if (isset($vals['fichaAtualizada'])) {
                $this->fichaAtualizada = $vals['fichaAtualizada'];
            }
            if (isset($vals['quantosAnimaisNoDomicilio'])) {
                $this->quantosAnimaisNoDomicilio = $vals['quantosAnimaisNoDomicilio'];
            }
            if (isset($vals['stAnimaisNoDomicilio'])) {
                $this->stAnimaisNoDomicilio = $vals['stAnimaisNoDomicilio'];
            }
            if (isset($vals['statusTermoRecusa'])) {
                $this->statusTermoRecusa = $vals['statusTermoRecusa'];
            }
            if (isset($vals['tpCdsOrigem'])) {
                $this->tpCdsOrigem = $vals['tpCdsOrigem'];
            }
            if (isset($vals['uuid'])) {
                $this->uuid = $vals['uuid'];
            }
            if (isset($vals['uuidFichaOriginadora'])) {
                $this->uuidFichaOriginadora = $vals['uuidFichaOriginadora'];
            }
            if (isset($vals['tipoDeImovel'])) {
                $this->tipoDeImovel = $vals['tipoDeImovel'];
            }
            if (isset($vals['instituicaoPermanencia'])) {
                $this->instituicaoPermanencia = $vals['instituicaoPermanencia'];
            }
            if (isset($vals['headerTransport'])) {
                $this->headerTransport = $vals['headerTransport'];
            }
            if (isset($vals['statusGeradoAutomaticamente'])) {
                $this->statusGeradoAutomaticamente = $vals['statusGeradoAutomaticamente'];
            }
        }
    }

    public function getName()
    {
        return 'CadastroDomiciliarThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->animaisNoDomicilio = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $xfer += $input->readI64($elem5);
                            $this->animaisNoDomicilio []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->condicaoMoradia = new \br\gov\saude\esusab\ras\cadastrodomiciliar\CondicaoMoradiaThrift();
                        $xfer += $this->condicaoMoradia->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->enderecoLocalPermanencia = new \br\gov\saude\esusab\ras\common\EnderecoLocalPermanenciaThrift();
                        $xfer += $this->enderecoLocalPermanencia->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->familias = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $elem11 = new \br\gov\saude\esusab\ras\cadastrodomiciliar\FamiliaRowThrift();
                            $xfer += $elem11->read($input);
                            $this->familias []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->fichaAtualizada);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->quantosAnimaisNoDomicilio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->stAnimaisNoDomicilio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->statusTermoRecusa);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->tpCdsOrigem);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uuid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uuidFichaOriginadora);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->tipoDeImovel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRUCT) {
                        $this->instituicaoPermanencia = new \br\gov\saude\esusab\ras\cadastrodomiciliar\InstituicaoPermanenciaThrift();
                        $xfer += $this->instituicaoPermanencia->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->headerTransport = new \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift();
                        $xfer += $this->headerTransport->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->statusGeradoAutomaticamente);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CadastroDomiciliarThrift');
        if ($this->animaisNoDomicilio !== null) {
            if (!is_array($this->animaisNoDomicilio)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('animaisNoDomicilio', TType::LST, 1);
            $output->writeListBegin(TType::I64, count($this->animaisNoDomicilio));
            foreach ($this->animaisNoDomicilio as $iter12) {
                $xfer += $output->writeI64($iter12);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->condicaoMoradia !== null) {
            if (!is_object($this->condicaoMoradia)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('condicaoMoradia', TType::STRUCT, 2);
            $xfer += $this->condicaoMoradia->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->enderecoLocalPermanencia !== null) {
            if (!is_object($this->enderecoLocalPermanencia)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('enderecoLocalPermanencia', TType::STRUCT, 4);
            $xfer += $this->enderecoLocalPermanencia->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->familias !== null) {
            if (!is_array($this->familias)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('familias', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->familias));
            foreach ($this->familias as $iter13) {
                $xfer += $iter13->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fichaAtualizada !== null) {
            $xfer += $output->writeFieldBegin('fichaAtualizada', TType::BOOL, 6);
            $xfer += $output->writeBool($this->fichaAtualizada);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->quantosAnimaisNoDomicilio !== null) {
            $xfer += $output->writeFieldBegin('quantosAnimaisNoDomicilio', TType::STRING, 7);
            $xfer += $output->writeString($this->quantosAnimaisNoDomicilio);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stAnimaisNoDomicilio !== null) {
            $xfer += $output->writeFieldBegin('stAnimaisNoDomicilio', TType::BOOL, 8);
            $xfer += $output->writeBool($this->stAnimaisNoDomicilio);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->statusTermoRecusa !== null) {
            $xfer += $output->writeFieldBegin('statusTermoRecusa', TType::BOOL, 9);
            $xfer += $output->writeBool($this->statusTermoRecusa);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tpCdsOrigem !== null) {
            $xfer += $output->writeFieldBegin('tpCdsOrigem', TType::I32, 10);
            $xfer += $output->writeI32($this->tpCdsOrigem);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uuid !== null) {
            $xfer += $output->writeFieldBegin('uuid', TType::STRING, 11);
            $xfer += $output->writeString($this->uuid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uuidFichaOriginadora !== null) {
            $xfer += $output->writeFieldBegin('uuidFichaOriginadora', TType::STRING, 12);
            $xfer += $output->writeString($this->uuidFichaOriginadora);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tipoDeImovel !== null) {
            $xfer += $output->writeFieldBegin('tipoDeImovel', TType::I64, 13);
            $xfer += $output->writeI64($this->tipoDeImovel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->instituicaoPermanencia !== null) {
            if (!is_object($this->instituicaoPermanencia)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('instituicaoPermanencia', TType::STRUCT, 14);
            $xfer += $this->instituicaoPermanencia->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headerTransport !== null) {
            if (!is_object($this->headerTransport)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('headerTransport', TType::STRUCT, 15);
            $xfer += $this->headerTransport->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->statusGeradoAutomaticamente !== null) {
            $xfer += $output->writeFieldBegin('statusGeradoAutomaticamente', TType::BOOL, 16);
            $xfer += $output->writeBool($this->statusGeradoAutomaticamente);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
