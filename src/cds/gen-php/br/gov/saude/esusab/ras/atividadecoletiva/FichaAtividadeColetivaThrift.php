<?php
namespace br\gov\saude\esusab\ras\atividadecoletiva;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class FichaAtividadeColetivaThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'uuidFicha',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'outraLocalidade',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'inep',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'numParticipantes',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        12 => array(
            'var' => 'numAvaliacoesAlteradas',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        13 => array(
            'var' => 'profissionais',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\br\gov\saude\esusab\ras\atividadecoletiva\ProfissionalCboRowItemThrift',
                ),
        ),
        14 => array(
            'var' => 'atividadeTipo',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        15 => array(
            'var' => 'temasParaReuniao',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
        16 => array(
            'var' => 'publicoAlvo',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
        18 => array(
            'var' => 'participantes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\br\gov\saude\esusab\ras\atividadecoletiva\ParticipanteRowItemThrift',
                ),
        ),
        19 => array(
            'var' => 'tbCdsOrigem',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'cnesLocalAtividade',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        22 => array(
            'var' => 'procedimento',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        23 => array(
            'var' => 'turno',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        24 => array(
            'var' => 'headerTransport',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift',
        ),
        25 => array(
            'var' => 'temasParaSaude',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
        26 => array(
            'var' => 'praticasEmSaude',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
                'type' => TType::I64,
                ),
        ),
        27 => array(
            'var' => 'pseEducacao',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        28 => array(
            'var' => 'pseSaude',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $uuidFicha = null;
    /**
     * @var string
     */
    public $outraLocalidade = null;
    /**
     * @var int
     */
    public $inep = null;
    /**
     * @var int
     */
    public $numParticipantes = null;
    /**
     * @var int
     */
    public $numAvaliacoesAlteradas = null;
    /**
     * @var \br\gov\saude\esusab\ras\atividadecoletiva\ProfissionalCboRowItemThrift[]
     */
    public $profissionais = null;
    /**
     * @var int
     */
    public $atividadeTipo = null;
    /**
     * @var int[]
     */
    public $temasParaReuniao = null;
    /**
     * @var int[]
     */
    public $publicoAlvo = null;
    /**
     * @var \br\gov\saude\esusab\ras\atividadecoletiva\ParticipanteRowItemThrift[]
     */
    public $participantes = null;
    /**
     * @var int
     */
    public $tbCdsOrigem = null;
    /**
     * @var string
     */
    public $cnesLocalAtividade = null;
    /**
     * @var string
     */
    public $procedimento = null;
    /**
     * @var int
     */
    public $turno = null;
    /**
     * @var \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift
     */
    public $headerTransport = null;
    /**
     * @var int[]
     */
    public $temasParaSaude = null;
    /**
     * @var int[]
     */
    public $praticasEmSaude = null;
    /**
     * @var bool
     */
    public $pseEducacao = null;
    /**
     * @var bool
     */
    public $pseSaude = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['uuidFicha'])) {
                $this->uuidFicha = $vals['uuidFicha'];
            }
            if (isset($vals['outraLocalidade'])) {
                $this->outraLocalidade = $vals['outraLocalidade'];
            }
            if (isset($vals['inep'])) {
                $this->inep = $vals['inep'];
            }
            if (isset($vals['numParticipantes'])) {
                $this->numParticipantes = $vals['numParticipantes'];
            }
            if (isset($vals['numAvaliacoesAlteradas'])) {
                $this->numAvaliacoesAlteradas = $vals['numAvaliacoesAlteradas'];
            }
            if (isset($vals['profissionais'])) {
                $this->profissionais = $vals['profissionais'];
            }
            if (isset($vals['atividadeTipo'])) {
                $this->atividadeTipo = $vals['atividadeTipo'];
            }
            if (isset($vals['temasParaReuniao'])) {
                $this->temasParaReuniao = $vals['temasParaReuniao'];
            }
            if (isset($vals['publicoAlvo'])) {
                $this->publicoAlvo = $vals['publicoAlvo'];
            }
            if (isset($vals['participantes'])) {
                $this->participantes = $vals['participantes'];
            }
            if (isset($vals['tbCdsOrigem'])) {
                $this->tbCdsOrigem = $vals['tbCdsOrigem'];
            }
            if (isset($vals['cnesLocalAtividade'])) {
                $this->cnesLocalAtividade = $vals['cnesLocalAtividade'];
            }
            if (isset($vals['procedimento'])) {
                $this->procedimento = $vals['procedimento'];
            }
            if (isset($vals['turno'])) {
                $this->turno = $vals['turno'];
            }
            if (isset($vals['headerTransport'])) {
                $this->headerTransport = $vals['headerTransport'];
            }
            if (isset($vals['temasParaSaude'])) {
                $this->temasParaSaude = $vals['temasParaSaude'];
            }
            if (isset($vals['praticasEmSaude'])) {
                $this->praticasEmSaude = $vals['praticasEmSaude'];
            }
            if (isset($vals['pseEducacao'])) {
                $this->pseEducacao = $vals['pseEducacao'];
            }
            if (isset($vals['pseSaude'])) {
                $this->pseSaude = $vals['pseSaude'];
            }
        }
    }

    public function getName()
    {
        return 'FichaAtividadeColetivaThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uuidFicha);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->outraLocalidade);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->inep);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->numParticipantes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->numAvaliacoesAlteradas);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->profissionais = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = new \br\gov\saude\esusab\ras\atividadecoletiva\ProfissionalCboRowItemThrift();
                            $xfer += $elem5->read($input);
                            $this->profissionais []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->atividadeTipo);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::LST) {
                        $this->temasParaReuniao = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $xfer += $input->readI64($elem11);
                            $this->temasParaReuniao []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::LST) {
                        $this->publicoAlvo = array();
                        $_size12 = 0;
                        $_etype15 = 0;
                        $xfer += $input->readListBegin($_etype15, $_size12);
                        for ($_i16 = 0; $_i16 < $_size12; ++$_i16) {
                            $elem17 = null;
                            $xfer += $input->readI64($elem17);
                            $this->publicoAlvo []= $elem17;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->participantes = array();
                        $_size18 = 0;
                        $_etype21 = 0;
                        $xfer += $input->readListBegin($_etype21, $_size18);
                        for ($_i22 = 0; $_i22 < $_size18; ++$_i22) {
                            $elem23 = null;
                            $elem23 = new \br\gov\saude\esusab\ras\atividadecoletiva\ParticipanteRowItemThrift();
                            $xfer += $elem23->read($input);
                            $this->participantes []= $elem23;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->tbCdsOrigem);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cnesLocalAtividade);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->procedimento);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->turno);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::STRUCT) {
                        $this->headerTransport = new \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift();
                        $xfer += $this->headerTransport->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::LST) {
                        $this->temasParaSaude = array();
                        $_size24 = 0;
                        $_etype27 = 0;
                        $xfer += $input->readListBegin($_etype27, $_size24);
                        for ($_i28 = 0; $_i28 < $_size24; ++$_i28) {
                            $elem29 = null;
                            $xfer += $input->readI64($elem29);
                            $this->temasParaSaude []= $elem29;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::LST) {
                        $this->praticasEmSaude = array();
                        $_size30 = 0;
                        $_etype33 = 0;
                        $xfer += $input->readListBegin($_etype33, $_size30);
                        for ($_i34 = 0; $_i34 < $_size30; ++$_i34) {
                            $elem35 = null;
                            $xfer += $input->readI64($elem35);
                            $this->praticasEmSaude []= $elem35;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->pseEducacao);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->pseSaude);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('FichaAtividadeColetivaThrift');
        if ($this->uuidFicha !== null) {
            $xfer += $output->writeFieldBegin('uuidFicha', TType::STRING, 1);
            $xfer += $output->writeString($this->uuidFicha);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->outraLocalidade !== null) {
            $xfer += $output->writeFieldBegin('outraLocalidade', TType::STRING, 4);
            $xfer += $output->writeString($this->outraLocalidade);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inep !== null) {
            $xfer += $output->writeFieldBegin('inep', TType::I64, 7);
            $xfer += $output->writeI64($this->inep);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->numParticipantes !== null) {
            $xfer += $output->writeFieldBegin('numParticipantes', TType::I32, 11);
            $xfer += $output->writeI32($this->numParticipantes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->numAvaliacoesAlteradas !== null) {
            $xfer += $output->writeFieldBegin('numAvaliacoesAlteradas', TType::I32, 12);
            $xfer += $output->writeI32($this->numAvaliacoesAlteradas);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->profissionais !== null) {
            if (!is_array($this->profissionais)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('profissionais', TType::LST, 13);
            $output->writeListBegin(TType::STRUCT, count($this->profissionais));
            foreach ($this->profissionais as $iter36) {
                $xfer += $iter36->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->atividadeTipo !== null) {
            $xfer += $output->writeFieldBegin('atividadeTipo', TType::I64, 14);
            $xfer += $output->writeI64($this->atividadeTipo);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->temasParaReuniao !== null) {
            if (!is_array($this->temasParaReuniao)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('temasParaReuniao', TType::LST, 15);
            $output->writeListBegin(TType::I64, count($this->temasParaReuniao));
            foreach ($this->temasParaReuniao as $iter37) {
                $xfer += $output->writeI64($iter37);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->publicoAlvo !== null) {
            if (!is_array($this->publicoAlvo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('publicoAlvo', TType::LST, 16);
            $output->writeListBegin(TType::I64, count($this->publicoAlvo));
            foreach ($this->publicoAlvo as $iter38) {
                $xfer += $output->writeI64($iter38);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->participantes !== null) {
            if (!is_array($this->participantes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('participantes', TType::LST, 18);
            $output->writeListBegin(TType::STRUCT, count($this->participantes));
            foreach ($this->participantes as $iter39) {
                $xfer += $iter39->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tbCdsOrigem !== null) {
            $xfer += $output->writeFieldBegin('tbCdsOrigem', TType::I32, 19);
            $xfer += $output->writeI32($this->tbCdsOrigem);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cnesLocalAtividade !== null) {
            $xfer += $output->writeFieldBegin('cnesLocalAtividade', TType::STRING, 21);
            $xfer += $output->writeString($this->cnesLocalAtividade);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->procedimento !== null) {
            $xfer += $output->writeFieldBegin('procedimento', TType::STRING, 22);
            $xfer += $output->writeString($this->procedimento);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->turno !== null) {
            $xfer += $output->writeFieldBegin('turno', TType::I64, 23);
            $xfer += $output->writeI64($this->turno);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headerTransport !== null) {
            if (!is_object($this->headerTransport)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('headerTransport', TType::STRUCT, 24);
            $xfer += $this->headerTransport->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->temasParaSaude !== null) {
            if (!is_array($this->temasParaSaude)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('temasParaSaude', TType::LST, 25);
            $output->writeListBegin(TType::I64, count($this->temasParaSaude));
            foreach ($this->temasParaSaude as $iter40) {
                $xfer += $output->writeI64($iter40);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->praticasEmSaude !== null) {
            if (!is_array($this->praticasEmSaude)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('praticasEmSaude', TType::LST, 26);
            $output->writeListBegin(TType::I64, count($this->praticasEmSaude));
            foreach ($this->praticasEmSaude as $iter41) {
                $xfer += $output->writeI64($iter41);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pseEducacao !== null) {
            $xfer += $output->writeFieldBegin('pseEducacao', TType::BOOL, 27);
            $xfer += $output->writeBool($this->pseEducacao);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pseSaude !== null) {
            $xfer += $output->writeFieldBegin('pseSaude', TType::BOOL, 28);
            $xfer += $output->writeBool($this->pseSaude);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
