<?php
namespace br\gov\saude\esusab\dadotransp;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Objeto que encapsula uma ficha serializada com TBinaryProtocol e alguns de seus dados de identificação
 */
class DadoTransporteThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'uuidDadoSerializado',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'tipoDadoSerializado',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'cnesDadoSerializado',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'codIbge',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'ineDadoSerializado',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'numLote',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        7 => array(
            'var' => 'dadoSerializado',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'remetente',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift',
        ),
        9 => array(
            'var' => 'originadora',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift',
        ),
        10 => array(
            'var' => 'versao',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\dadotransp\VersaoThrift',
        ),
    );

    /**
     * UUID do dado (identificador "universal" gerado na criação do item)
     * 
     * @var string
     */
    public $uuidDadoSerializado = null;
    /**
     * Tipo/classe do objeto serializado através do TBinaryProtocol.
     * 
     * @var int
     */
    public $tipoDadoSerializado = null;
    /**
     * Código CNES da unidade de saúde.
     * 
     * @var string
     */
    public $cnesDadoSerializado = null;
    /**
     * Código IBGE do dado serializado
     * 
     * @var string
     */
    public $codIbge = null;
    /**
     * Código INE da equipe que gerou a ficha.
     * 
     * @var string
     */
    public $ineDadoSerializado = null;
    /**
     * Numero do lote em {@link DadoTransporteThrift#originadora}
     * 
     * @var int
     */
    public $numLote = null;
    /**
     * Ficha serializado através do TBinaryProtocol.
     * 
     * @var string
     */
    public $dadoSerializado = null;
    /**
     * Identifica a instalação que enviou o dado
     * @see DadoInstalacaoThrift
     * 
     * @var \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift
     */
    public $remetente = null;
    /**
     * Identifica a instalação que cadastrou/digitou
     * @see DadoInstalacaoThrift
     * 
     * @var \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift
     */
    public $originadora = null;
    /**
     * Versão da ficha
     * @see VersaoThrift
     * 
     * @var \br\gov\saude\esusab\dadotransp\VersaoThrift
     */
    public $versao = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['uuidDadoSerializado'])) {
                $this->uuidDadoSerializado = $vals['uuidDadoSerializado'];
            }
            if (isset($vals['tipoDadoSerializado'])) {
                $this->tipoDadoSerializado = $vals['tipoDadoSerializado'];
            }
            if (isset($vals['cnesDadoSerializado'])) {
                $this->cnesDadoSerializado = $vals['cnesDadoSerializado'];
            }
            if (isset($vals['codIbge'])) {
                $this->codIbge = $vals['codIbge'];
            }
            if (isset($vals['ineDadoSerializado'])) {
                $this->ineDadoSerializado = $vals['ineDadoSerializado'];
            }
            if (isset($vals['numLote'])) {
                $this->numLote = $vals['numLote'];
            }
            if (isset($vals['dadoSerializado'])) {
                $this->dadoSerializado = $vals['dadoSerializado'];
            }
            if (isset($vals['remetente'])) {
                $this->remetente = $vals['remetente'];
            }
            if (isset($vals['originadora'])) {
                $this->originadora = $vals['originadora'];
            }
            if (isset($vals['versao'])) {
                $this->versao = $vals['versao'];
            }
        }
    }

    public function getName()
    {
        return 'DadoTransporteThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->uuidDadoSerializado);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->tipoDadoSerializado);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cnesDadoSerializado);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codIbge);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ineDadoSerializado);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->numLote);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dadoSerializado);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->remetente = new \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift();
                        $xfer += $this->remetente->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->originadora = new \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift();
                        $xfer += $this->originadora->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->versao = new \br\gov\saude\esusab\dadotransp\VersaoThrift();
                        $xfer += $this->versao->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('DadoTransporteThrift');
        if ($this->uuidDadoSerializado !== null) {
            $xfer += $output->writeFieldBegin('uuidDadoSerializado', TType::STRING, 1);
            $xfer += $output->writeString($this->uuidDadoSerializado);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tipoDadoSerializado !== null) {
            $xfer += $output->writeFieldBegin('tipoDadoSerializado', TType::I64, 2);
            $xfer += $output->writeI64($this->tipoDadoSerializado);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cnesDadoSerializado !== null) {
            $xfer += $output->writeFieldBegin('cnesDadoSerializado', TType::STRING, 3);
            $xfer += $output->writeString($this->cnesDadoSerializado);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codIbge !== null) {
            $xfer += $output->writeFieldBegin('codIbge', TType::STRING, 4);
            $xfer += $output->writeString($this->codIbge);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ineDadoSerializado !== null) {
            $xfer += $output->writeFieldBegin('ineDadoSerializado', TType::STRING, 5);
            $xfer += $output->writeString($this->ineDadoSerializado);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->numLote !== null) {
            $xfer += $output->writeFieldBegin('numLote', TType::I64, 6);
            $xfer += $output->writeI64($this->numLote);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dadoSerializado !== null) {
            $xfer += $output->writeFieldBegin('dadoSerializado', TType::STRING, 7);
            $xfer += $output->writeString($this->dadoSerializado);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->remetente !== null) {
            if (!is_object($this->remetente)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('remetente', TType::STRUCT, 8);
            $xfer += $this->remetente->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->originadora !== null) {
            if (!is_object($this->originadora)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('originadora', TType::STRUCT, 9);
            $xfer += $this->originadora->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->versao !== null) {
            if (!is_object($this->versao)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('versao', TType::STRUCT, 10);
            $xfer += $this->versao->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
