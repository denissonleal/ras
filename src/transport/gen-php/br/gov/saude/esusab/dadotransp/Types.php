<?php
namespace br\gov\saude\esusab\dadotransp;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Indica a versão do dado a ser transportado. A versão do dado não necessariamente reflete a versão do sistema.
 */
class VersaoThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $major = null;
  /**
   * @var int
   */
  public $minor = null;
  /**
   * @var int
   */
  public $revision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'major',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'minor',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'revision',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['major'])) {
        $this->major = $vals['major'];
      }
      if (isset($vals['minor'])) {
        $this->minor = $vals['minor'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
    }
  }

  public function getName() {
    return 'VersaoThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->major);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VersaoThrift');
    if ($this->major !== null) {
      $xfer += $output->writeFieldBegin('major', TType::I32, 1);
      $xfer += $output->writeI32($this->major);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minor !== null) {
      $xfer += $output->writeFieldBegin('minor', TType::I32, 2);
      $xfer += $output->writeI32($this->minor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I32, 3);
      $xfer += $output->writeI32($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Dados para identificar a instalacao que cadastrou/gerou os dados e/ou enviou
 */
class DadoInstalacaoThrift {
  static $_TSPEC;

  /**
   * Identifica o software que gerou o dado (pec/cds, cdsOff ou software de terceiros).
   * 
   * @var string
   */
  public $contraChave = null;
  /**
   * É um identificador da instalação do software que gerou o dado. Seja ele o e-SUS ou software de terceiro.
   * 
   * @var string
   */
  public $uuidInstalacao = null;
  /**
   * Cpf do responsável ou CNPJ da empresa responsável
   * 
   * @var string
   */
  public $cpfOuCnpj = null;
  /**
   * Nome do responsável ou Razão Social da empresa responsável
   * 
   * @var string
   */
  public $nomeOuRazaoSocial = null;
  /**
   * Telefone da pessoa ou empresa responsável
   * 
   * @var string
   */
  public $fone = null;
  /**
   * Email da pessoa ou empresa responsável
   * 
   * @var string
   */
  public $email = null;
  /**
   * Versão do software
   * 
   * @var string
   */
  public $versaoSistema = null;
  /**
   * Nome do banco de dados que o software utiliza
   * 
   * @var string
   */
  public $nomeBancoDados = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contraChave',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uuidInstalacao',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cpfOuCnpj',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'nomeOuRazaoSocial',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'fone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'versaoSistema',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'nomeBancoDados',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contraChave'])) {
        $this->contraChave = $vals['contraChave'];
      }
      if (isset($vals['uuidInstalacao'])) {
        $this->uuidInstalacao = $vals['uuidInstalacao'];
      }
      if (isset($vals['cpfOuCnpj'])) {
        $this->cpfOuCnpj = $vals['cpfOuCnpj'];
      }
      if (isset($vals['nomeOuRazaoSocial'])) {
        $this->nomeOuRazaoSocial = $vals['nomeOuRazaoSocial'];
      }
      if (isset($vals['fone'])) {
        $this->fone = $vals['fone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['versaoSistema'])) {
        $this->versaoSistema = $vals['versaoSistema'];
      }
      if (isset($vals['nomeBancoDados'])) {
        $this->nomeBancoDados = $vals['nomeBancoDados'];
      }
    }
  }

  public function getName() {
    return 'DadoInstalacaoThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contraChave);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidInstalacao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cpfOuCnpj);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeOuRazaoSocial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->versaoSistema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeBancoDados);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DadoInstalacaoThrift');
    if ($this->contraChave !== null) {
      $xfer += $output->writeFieldBegin('contraChave', TType::STRING, 1);
      $xfer += $output->writeString($this->contraChave);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuidInstalacao !== null) {
      $xfer += $output->writeFieldBegin('uuidInstalacao', TType::STRING, 2);
      $xfer += $output->writeString($this->uuidInstalacao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpfOuCnpj !== null) {
      $xfer += $output->writeFieldBegin('cpfOuCnpj', TType::STRING, 3);
      $xfer += $output->writeString($this->cpfOuCnpj);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeOuRazaoSocial !== null) {
      $xfer += $output->writeFieldBegin('nomeOuRazaoSocial', TType::STRING, 4);
      $xfer += $output->writeString($this->nomeOuRazaoSocial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fone !== null) {
      $xfer += $output->writeFieldBegin('fone', TType::STRING, 5);
      $xfer += $output->writeString($this->fone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 6);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versaoSistema !== null) {
      $xfer += $output->writeFieldBegin('versaoSistema', TType::STRING, 7);
      $xfer += $output->writeString($this->versaoSistema);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeBancoDados !== null) {
      $xfer += $output->writeFieldBegin('nomeBancoDados', TType::STRING, 8);
      $xfer += $output->writeString($this->nomeBancoDados);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Objeto que encapsula uma ficha serializada com TBinaryProtocol e alguns de seus dados de identificação
 */
class DadoTransporteThrift {
  static $_TSPEC;

  /**
   * UUID do dado (identificador "universal" gerado na criação do item)
   * 
   * @var string
   */
  public $uuidDadoSerializado = null;
  /**
   * Tipo/classe do objeto serializado através do TBinaryProtocol.
   * 
   * @var int
   */
  public $tipoDadoSerializado = null;
  /**
   * Código CNES da unidade de saúde.
   * 
   * @var string
   */
  public $cnesDadoSerializado = null;
  /**
   * Código IBGE do dado serializado
   * 
   * @var string
   */
  public $codIbge = null;
  /**
   * Código INE da equipe que gerou a ficha.
   * 
   * @var string
   */
  public $ineDadoSerializado = null;
  /**
   * Numero do lote em {@link DadoTransporteThrift#originadora}
   * 
   * @var int
   */
  public $numLote = null;
  /**
   * Ficha serializado através do TBinaryProtocol.
   * 
   * @var string
   */
  public $dadoSerializado = null;
  /**
   * Identifica a instalação que enviou o dado
   * @see DadoInstalacaoThrift
   * 
   * @var \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift
   */
  public $remetente = null;
  /**
   * Identifica a instalação que cadastrou/digitou
   * @see DadoInstalacaoThrift
   * 
   * @var \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift
   */
  public $originadora = null;
  /**
   * Versão da ficha
   * @see VersaoThrift
   * 
   * @var \br\gov\saude\esusab\dadotransp\VersaoThrift
   */
  public $versao = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuidDadoSerializado',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tipoDadoSerializado',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'cnesDadoSerializado',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'codIbge',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ineDadoSerializado',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'numLote',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'dadoSerializado',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'remetente',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift',
          ),
        9 => array(
          'var' => 'originadora',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift',
          ),
        10 => array(
          'var' => 'versao',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\dadotransp\VersaoThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuidDadoSerializado'])) {
        $this->uuidDadoSerializado = $vals['uuidDadoSerializado'];
      }
      if (isset($vals['tipoDadoSerializado'])) {
        $this->tipoDadoSerializado = $vals['tipoDadoSerializado'];
      }
      if (isset($vals['cnesDadoSerializado'])) {
        $this->cnesDadoSerializado = $vals['cnesDadoSerializado'];
      }
      if (isset($vals['codIbge'])) {
        $this->codIbge = $vals['codIbge'];
      }
      if (isset($vals['ineDadoSerializado'])) {
        $this->ineDadoSerializado = $vals['ineDadoSerializado'];
      }
      if (isset($vals['numLote'])) {
        $this->numLote = $vals['numLote'];
      }
      if (isset($vals['dadoSerializado'])) {
        $this->dadoSerializado = $vals['dadoSerializado'];
      }
      if (isset($vals['remetente'])) {
        $this->remetente = $vals['remetente'];
      }
      if (isset($vals['originadora'])) {
        $this->originadora = $vals['originadora'];
      }
      if (isset($vals['versao'])) {
        $this->versao = $vals['versao'];
      }
    }
  }

  public function getName() {
    return 'DadoTransporteThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidDadoSerializado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tipoDadoSerializado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnesDadoSerializado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codIbge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ineDadoSerializado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numLote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dadoSerializado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->remetente = new \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift();
            $xfer += $this->remetente->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->originadora = new \br\gov\saude\esusab\dadotransp\DadoInstalacaoThrift();
            $xfer += $this->originadora->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->versao = new \br\gov\saude\esusab\dadotransp\VersaoThrift();
            $xfer += $this->versao->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DadoTransporteThrift');
    if ($this->uuidDadoSerializado !== null) {
      $xfer += $output->writeFieldBegin('uuidDadoSerializado', TType::STRING, 1);
      $xfer += $output->writeString($this->uuidDadoSerializado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoDadoSerializado !== null) {
      $xfer += $output->writeFieldBegin('tipoDadoSerializado', TType::I64, 2);
      $xfer += $output->writeI64($this->tipoDadoSerializado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnesDadoSerializado !== null) {
      $xfer += $output->writeFieldBegin('cnesDadoSerializado', TType::STRING, 3);
      $xfer += $output->writeString($this->cnesDadoSerializado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codIbge !== null) {
      $xfer += $output->writeFieldBegin('codIbge', TType::STRING, 4);
      $xfer += $output->writeString($this->codIbge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ineDadoSerializado !== null) {
      $xfer += $output->writeFieldBegin('ineDadoSerializado', TType::STRING, 5);
      $xfer += $output->writeString($this->ineDadoSerializado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numLote !== null) {
      $xfer += $output->writeFieldBegin('numLote', TType::I64, 6);
      $xfer += $output->writeI64($this->numLote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dadoSerializado !== null) {
      $xfer += $output->writeFieldBegin('dadoSerializado', TType::STRING, 7);
      $xfer += $output->writeString($this->dadoSerializado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remetente !== null) {
      if (!is_object($this->remetente)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('remetente', TType::STRUCT, 8);
      $xfer += $this->remetente->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->originadora !== null) {
      if (!is_object($this->originadora)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('originadora', TType::STRUCT, 9);
      $xfer += $this->originadora->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versao !== null) {
      if (!is_object($this->versao)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('versao', TType::STRUCT, 10);
      $xfer += $this->versao->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


