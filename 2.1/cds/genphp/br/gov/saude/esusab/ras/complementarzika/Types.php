<?php
namespace br\gov\saude\esusab\ras\complementarzika;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class FichaComplementarZikaMicrocefaliaThrift {
  static $_TSPEC;

  /**
   * @var \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift
   */
  public $headerTransport = null;
  /**
   * @var string
   */
  public $uuidFicha = null;
  /**
   * @var int
   */
  public $tpCdsOrigem = null;
  /**
   * @var int
   */
  public $turno = null;
  /**
   * @var string
   */
  public $cnsCidadao = null;
  /**
   * @var string
   */
  public $cnsResponsavelFamiliar = null;
  /**
   * @var int
   */
  public $dataRealizacaoTesteOlhinho = null;
  /**
   * @var int
   */
  public $coResultadoTesteOlhinho = null;
  /**
   * @var int
   */
  public $dataRealizacaoExameFundoOlho = null;
  /**
   * @var int
   */
  public $coResultadoExameFundoOlho = null;
  /**
   * @var int
   */
  public $dataRealizacaoTesteOrelhinha = null;
  /**
   * @var int
   */
  public $coResultadoTesteOrelhinha = null;
  /**
   * @var int
   */
  public $dataRealizacaoUSTransfontanela = null;
  /**
   * @var int
   */
  public $coResultadoUsTransfontanela = null;
  /**
   * @var int
   */
  public $dataRealizacaoTomografiaComputadorizada = null;
  /**
   * @var int
   */
  public $coResultadoTomografiaComputadorizada = null;
  /**
   * @var int
   */
  public $dataRealizacaoRessonanciaMagnetica = null;
  /**
   * @var int
   */
  public $coResultadoRessonanciaMagnetica = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'headerTransport',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift',
          ),
        2 => array(
          'var' => 'uuidFicha',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tpCdsOrigem',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'turno',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'cnsCidadao',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cnsResponsavelFamiliar',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'dataRealizacaoTesteOlhinho',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'coResultadoTesteOlhinho',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'dataRealizacaoExameFundoOlho',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'coResultadoExameFundoOlho',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'dataRealizacaoTesteOrelhinha',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'coResultadoTesteOrelhinha',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'dataRealizacaoUSTransfontanela',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'coResultadoUsTransfontanela',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'dataRealizacaoTomografiaComputadorizada',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'coResultadoTomografiaComputadorizada',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'dataRealizacaoRessonanciaMagnetica',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'coResultadoRessonanciaMagnetica',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['headerTransport'])) {
        $this->headerTransport = $vals['headerTransport'];
      }
      if (isset($vals['uuidFicha'])) {
        $this->uuidFicha = $vals['uuidFicha'];
      }
      if (isset($vals['tpCdsOrigem'])) {
        $this->tpCdsOrigem = $vals['tpCdsOrigem'];
      }
      if (isset($vals['turno'])) {
        $this->turno = $vals['turno'];
      }
      if (isset($vals['cnsCidadao'])) {
        $this->cnsCidadao = $vals['cnsCidadao'];
      }
      if (isset($vals['cnsResponsavelFamiliar'])) {
        $this->cnsResponsavelFamiliar = $vals['cnsResponsavelFamiliar'];
      }
      if (isset($vals['dataRealizacaoTesteOlhinho'])) {
        $this->dataRealizacaoTesteOlhinho = $vals['dataRealizacaoTesteOlhinho'];
      }
      if (isset($vals['coResultadoTesteOlhinho'])) {
        $this->coResultadoTesteOlhinho = $vals['coResultadoTesteOlhinho'];
      }
      if (isset($vals['dataRealizacaoExameFundoOlho'])) {
        $this->dataRealizacaoExameFundoOlho = $vals['dataRealizacaoExameFundoOlho'];
      }
      if (isset($vals['coResultadoExameFundoOlho'])) {
        $this->coResultadoExameFundoOlho = $vals['coResultadoExameFundoOlho'];
      }
      if (isset($vals['dataRealizacaoTesteOrelhinha'])) {
        $this->dataRealizacaoTesteOrelhinha = $vals['dataRealizacaoTesteOrelhinha'];
      }
      if (isset($vals['coResultadoTesteOrelhinha'])) {
        $this->coResultadoTesteOrelhinha = $vals['coResultadoTesteOrelhinha'];
      }
      if (isset($vals['dataRealizacaoUSTransfontanela'])) {
        $this->dataRealizacaoUSTransfontanela = $vals['dataRealizacaoUSTransfontanela'];
      }
      if (isset($vals['coResultadoUsTransfontanela'])) {
        $this->coResultadoUsTransfontanela = $vals['coResultadoUsTransfontanela'];
      }
      if (isset($vals['dataRealizacaoTomografiaComputadorizada'])) {
        $this->dataRealizacaoTomografiaComputadorizada = $vals['dataRealizacaoTomografiaComputadorizada'];
      }
      if (isset($vals['coResultadoTomografiaComputadorizada'])) {
        $this->coResultadoTomografiaComputadorizada = $vals['coResultadoTomografiaComputadorizada'];
      }
      if (isset($vals['dataRealizacaoRessonanciaMagnetica'])) {
        $this->dataRealizacaoRessonanciaMagnetica = $vals['dataRealizacaoRessonanciaMagnetica'];
      }
      if (isset($vals['coResultadoRessonanciaMagnetica'])) {
        $this->coResultadoRessonanciaMagnetica = $vals['coResultadoRessonanciaMagnetica'];
      }
    }
  }

  public function getName() {
    return 'FichaComplementarZikaMicrocefaliaThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->headerTransport = new \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift();
            $xfer += $this->headerTransport->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidFicha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tpCdsOrigem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->turno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnsCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnsResponsavelFamiliar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataRealizacaoTesteOlhinho);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coResultadoTesteOlhinho);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataRealizacaoExameFundoOlho);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coResultadoExameFundoOlho);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataRealizacaoTesteOrelhinha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coResultadoTesteOrelhinha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataRealizacaoUSTransfontanela);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coResultadoUsTransfontanela);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataRealizacaoTomografiaComputadorizada);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coResultadoTomografiaComputadorizada);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataRealizacaoRessonanciaMagnetica);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coResultadoRessonanciaMagnetica);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FichaComplementarZikaMicrocefaliaThrift');
    if ($this->headerTransport !== null) {
      if (!is_object($this->headerTransport)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('headerTransport', TType::STRUCT, 1);
      $xfer += $this->headerTransport->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuidFicha !== null) {
      $xfer += $output->writeFieldBegin('uuidFicha', TType::STRING, 2);
      $xfer += $output->writeString($this->uuidFicha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tpCdsOrigem !== null) {
      $xfer += $output->writeFieldBegin('tpCdsOrigem', TType::I32, 3);
      $xfer += $output->writeI32($this->tpCdsOrigem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->turno !== null) {
      $xfer += $output->writeFieldBegin('turno', TType::I64, 4);
      $xfer += $output->writeI64($this->turno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnsCidadao !== null) {
      $xfer += $output->writeFieldBegin('cnsCidadao', TType::STRING, 5);
      $xfer += $output->writeString($this->cnsCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnsResponsavelFamiliar !== null) {
      $xfer += $output->writeFieldBegin('cnsResponsavelFamiliar', TType::STRING, 6);
      $xfer += $output->writeString($this->cnsResponsavelFamiliar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataRealizacaoTesteOlhinho !== null) {
      $xfer += $output->writeFieldBegin('dataRealizacaoTesteOlhinho', TType::I64, 7);
      $xfer += $output->writeI64($this->dataRealizacaoTesteOlhinho);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coResultadoTesteOlhinho !== null) {
      $xfer += $output->writeFieldBegin('coResultadoTesteOlhinho', TType::I64, 8);
      $xfer += $output->writeI64($this->coResultadoTesteOlhinho);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataRealizacaoExameFundoOlho !== null) {
      $xfer += $output->writeFieldBegin('dataRealizacaoExameFundoOlho', TType::I64, 9);
      $xfer += $output->writeI64($this->dataRealizacaoExameFundoOlho);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coResultadoExameFundoOlho !== null) {
      $xfer += $output->writeFieldBegin('coResultadoExameFundoOlho', TType::I64, 10);
      $xfer += $output->writeI64($this->coResultadoExameFundoOlho);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataRealizacaoTesteOrelhinha !== null) {
      $xfer += $output->writeFieldBegin('dataRealizacaoTesteOrelhinha', TType::I64, 11);
      $xfer += $output->writeI64($this->dataRealizacaoTesteOrelhinha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coResultadoTesteOrelhinha !== null) {
      $xfer += $output->writeFieldBegin('coResultadoTesteOrelhinha', TType::I64, 12);
      $xfer += $output->writeI64($this->coResultadoTesteOrelhinha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataRealizacaoUSTransfontanela !== null) {
      $xfer += $output->writeFieldBegin('dataRealizacaoUSTransfontanela', TType::I64, 13);
      $xfer += $output->writeI64($this->dataRealizacaoUSTransfontanela);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coResultadoUsTransfontanela !== null) {
      $xfer += $output->writeFieldBegin('coResultadoUsTransfontanela', TType::I64, 14);
      $xfer += $output->writeI64($this->coResultadoUsTransfontanela);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataRealizacaoTomografiaComputadorizada !== null) {
      $xfer += $output->writeFieldBegin('dataRealizacaoTomografiaComputadorizada', TType::I64, 15);
      $xfer += $output->writeI64($this->dataRealizacaoTomografiaComputadorizada);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coResultadoTomografiaComputadorizada !== null) {
      $xfer += $output->writeFieldBegin('coResultadoTomografiaComputadorizada', TType::I64, 16);
      $xfer += $output->writeI64($this->coResultadoTomografiaComputadorizada);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataRealizacaoRessonanciaMagnetica !== null) {
      $xfer += $output->writeFieldBegin('dataRealizacaoRessonanciaMagnetica', TType::I64, 17);
      $xfer += $output->writeI64($this->dataRealizacaoRessonanciaMagnetica);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coResultadoRessonanciaMagnetica !== null) {
      $xfer += $output->writeFieldBegin('coResultadoRessonanciaMagnetica', TType::I64, 18);
      $xfer += $output->writeI64($this->coResultadoRessonanciaMagnetica);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


