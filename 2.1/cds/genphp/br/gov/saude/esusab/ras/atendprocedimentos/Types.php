<?php
namespace br\gov\saude\esusab\ras\atendprocedimentos;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class FichaProcedimentoChildThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $numProntuario = null;
  /**
   * @var string
   */
  public $cnsCidadao = null;
  /**
   * @var int
   */
  public $dtNascimento = null;
  /**
   * @var int
   */
  public $sexo = null;
  /**
   * @var int
   */
  public $localAtendimento = null;
  /**
   * @var int
   */
  public $turno = null;
  /**
   * @var bool
   */
  public $statusEscutaInicialOrientacao = null;
  /**
   * @var string[]
   */
  public $procedimentos = null;
  /**
   * @var string[]
   */
  public $outrosSiaProcedimentos = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'numProntuario',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cnsCidadao',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dtNascimento',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'sexo',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'localAtendimento',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'turno',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'statusEscutaInicialOrientacao',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'procedimentos',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'outrosSiaProcedimentos',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['numProntuario'])) {
        $this->numProntuario = $vals['numProntuario'];
      }
      if (isset($vals['cnsCidadao'])) {
        $this->cnsCidadao = $vals['cnsCidadao'];
      }
      if (isset($vals['dtNascimento'])) {
        $this->dtNascimento = $vals['dtNascimento'];
      }
      if (isset($vals['sexo'])) {
        $this->sexo = $vals['sexo'];
      }
      if (isset($vals['localAtendimento'])) {
        $this->localAtendimento = $vals['localAtendimento'];
      }
      if (isset($vals['turno'])) {
        $this->turno = $vals['turno'];
      }
      if (isset($vals['statusEscutaInicialOrientacao'])) {
        $this->statusEscutaInicialOrientacao = $vals['statusEscutaInicialOrientacao'];
      }
      if (isset($vals['procedimentos'])) {
        $this->procedimentos = $vals['procedimentos'];
      }
      if (isset($vals['outrosSiaProcedimentos'])) {
        $this->outrosSiaProcedimentos = $vals['outrosSiaProcedimentos'];
      }
    }
  }

  public function getName() {
    return 'FichaProcedimentoChildThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numProntuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnsCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dtNascimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sexo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->localAtendimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->turno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEscutaInicialOrientacao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->procedimentos = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->procedimentos []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->outrosSiaProcedimentos = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->outrosSiaProcedimentos []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FichaProcedimentoChildThrift');
    if ($this->numProntuario !== null) {
      $xfer += $output->writeFieldBegin('numProntuario', TType::STRING, 1);
      $xfer += $output->writeString($this->numProntuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnsCidadao !== null) {
      $xfer += $output->writeFieldBegin('cnsCidadao', TType::STRING, 2);
      $xfer += $output->writeString($this->cnsCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dtNascimento !== null) {
      $xfer += $output->writeFieldBegin('dtNascimento', TType::I64, 3);
      $xfer += $output->writeI64($this->dtNascimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexo !== null) {
      $xfer += $output->writeFieldBegin('sexo', TType::I64, 4);
      $xfer += $output->writeI64($this->sexo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localAtendimento !== null) {
      $xfer += $output->writeFieldBegin('localAtendimento', TType::I64, 5);
      $xfer += $output->writeI64($this->localAtendimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->turno !== null) {
      $xfer += $output->writeFieldBegin('turno', TType::I64, 6);
      $xfer += $output->writeI64($this->turno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEscutaInicialOrientacao !== null) {
      $xfer += $output->writeFieldBegin('statusEscutaInicialOrientacao', TType::BOOL, 7);
      $xfer += $output->writeBool($this->statusEscutaInicialOrientacao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->procedimentos !== null) {
      if (!is_array($this->procedimentos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('procedimentos', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->procedimentos));
        {
          foreach ($this->procedimentos as $iter12)
          {
            $xfer += $output->writeString($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->outrosSiaProcedimentos !== null) {
      if (!is_array($this->outrosSiaProcedimentos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('outrosSiaProcedimentos', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->outrosSiaProcedimentos));
        {
          foreach ($this->outrosSiaProcedimentos as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FichaProcedimentoMasterThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uuidFicha = null;
  /**
   * @var int
   */
  public $tpCdsOrigem = null;
  /**
   * @var \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift
   */
  public $headerTransport = null;
  /**
   * @var \br\gov\saude\esusab\ras\atendprocedimentos\FichaProcedimentoChildThrift[]
   */
  public $atendProcedimentos = null;
  /**
   * @var int
   */
  public $numTotalAfericaoPa = null;
  /**
   * @var int
   */
  public $numTotalGlicemiaCapilar = null;
  /**
   * @var int
   */
  public $numTotalAfericaoTemperatura = null;
  /**
   * @var int
   */
  public $numTotalMedicaoAltura = null;
  /**
   * @var int
   */
  public $numTotalCurativoSimples = null;
  /**
   * @var int
   */
  public $numTotalMedicaoPeso = null;
  /**
   * @var int
   */
  public $numTotalColetaMaterialParaExameLaboratorial = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuidFicha',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tpCdsOrigem',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'headerTransport',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift',
          ),
        4 => array(
          'var' => 'atendProcedimentos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\br\gov\saude\esusab\ras\atendprocedimentos\FichaProcedimentoChildThrift',
            ),
          ),
        5 => array(
          'var' => 'numTotalAfericaoPa',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'numTotalGlicemiaCapilar',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'numTotalAfericaoTemperatura',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'numTotalMedicaoAltura',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'numTotalCurativoSimples',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'numTotalMedicaoPeso',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'numTotalColetaMaterialParaExameLaboratorial',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuidFicha'])) {
        $this->uuidFicha = $vals['uuidFicha'];
      }
      if (isset($vals['tpCdsOrigem'])) {
        $this->tpCdsOrigem = $vals['tpCdsOrigem'];
      }
      if (isset($vals['headerTransport'])) {
        $this->headerTransport = $vals['headerTransport'];
      }
      if (isset($vals['atendProcedimentos'])) {
        $this->atendProcedimentos = $vals['atendProcedimentos'];
      }
      if (isset($vals['numTotalAfericaoPa'])) {
        $this->numTotalAfericaoPa = $vals['numTotalAfericaoPa'];
      }
      if (isset($vals['numTotalGlicemiaCapilar'])) {
        $this->numTotalGlicemiaCapilar = $vals['numTotalGlicemiaCapilar'];
      }
      if (isset($vals['numTotalAfericaoTemperatura'])) {
        $this->numTotalAfericaoTemperatura = $vals['numTotalAfericaoTemperatura'];
      }
      if (isset($vals['numTotalMedicaoAltura'])) {
        $this->numTotalMedicaoAltura = $vals['numTotalMedicaoAltura'];
      }
      if (isset($vals['numTotalCurativoSimples'])) {
        $this->numTotalCurativoSimples = $vals['numTotalCurativoSimples'];
      }
      if (isset($vals['numTotalMedicaoPeso'])) {
        $this->numTotalMedicaoPeso = $vals['numTotalMedicaoPeso'];
      }
      if (isset($vals['numTotalColetaMaterialParaExameLaboratorial'])) {
        $this->numTotalColetaMaterialParaExameLaboratorial = $vals['numTotalColetaMaterialParaExameLaboratorial'];
      }
    }
  }

  public function getName() {
    return 'FichaProcedimentoMasterThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidFicha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tpCdsOrigem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->headerTransport = new \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift();
            $xfer += $this->headerTransport->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->atendProcedimentos = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \br\gov\saude\esusab\ras\atendprocedimentos\FichaProcedimentoChildThrift();
              $xfer += $elem19->read($input);
              $this->atendProcedimentos []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalAfericaoPa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalGlicemiaCapilar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalAfericaoTemperatura);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalMedicaoAltura);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalCurativoSimples);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalMedicaoPeso);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->numTotalColetaMaterialParaExameLaboratorial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FichaProcedimentoMasterThrift');
    if ($this->uuidFicha !== null) {
      $xfer += $output->writeFieldBegin('uuidFicha', TType::STRING, 1);
      $xfer += $output->writeString($this->uuidFicha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tpCdsOrigem !== null) {
      $xfer += $output->writeFieldBegin('tpCdsOrigem', TType::I32, 2);
      $xfer += $output->writeI32($this->tpCdsOrigem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headerTransport !== null) {
      if (!is_object($this->headerTransport)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('headerTransport', TType::STRUCT, 3);
      $xfer += $this->headerTransport->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->atendProcedimentos !== null) {
      if (!is_array($this->atendProcedimentos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('atendProcedimentos', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->atendProcedimentos));
        {
          foreach ($this->atendProcedimentos as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalAfericaoPa !== null) {
      $xfer += $output->writeFieldBegin('numTotalAfericaoPa', TType::I64, 5);
      $xfer += $output->writeI64($this->numTotalAfericaoPa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalGlicemiaCapilar !== null) {
      $xfer += $output->writeFieldBegin('numTotalGlicemiaCapilar', TType::I64, 6);
      $xfer += $output->writeI64($this->numTotalGlicemiaCapilar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalAfericaoTemperatura !== null) {
      $xfer += $output->writeFieldBegin('numTotalAfericaoTemperatura', TType::I64, 7);
      $xfer += $output->writeI64($this->numTotalAfericaoTemperatura);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalMedicaoAltura !== null) {
      $xfer += $output->writeFieldBegin('numTotalMedicaoAltura', TType::I64, 8);
      $xfer += $output->writeI64($this->numTotalMedicaoAltura);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalCurativoSimples !== null) {
      $xfer += $output->writeFieldBegin('numTotalCurativoSimples', TType::I64, 9);
      $xfer += $output->writeI64($this->numTotalCurativoSimples);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalMedicaoPeso !== null) {
      $xfer += $output->writeFieldBegin('numTotalMedicaoPeso', TType::I64, 10);
      $xfer += $output->writeI64($this->numTotalMedicaoPeso);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numTotalColetaMaterialParaExameLaboratorial !== null) {
      $xfer += $output->writeFieldBegin('numTotalColetaMaterialParaExameLaboratorial', TType::I64, 11);
      $xfer += $output->writeI64($this->numTotalColetaMaterialParaExameLaboratorial);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


