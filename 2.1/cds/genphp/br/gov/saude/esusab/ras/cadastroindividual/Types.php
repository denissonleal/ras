<?php
namespace br\gov\saude\esusab\ras\cadastroindividual;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class CondicoesDeSaudeThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $descricaoCausaInternacaoEm12Meses = null;
  /**
   * @var string
   */
  public $descricaoOutraCondicao1 = null;
  /**
   * @var string
   */
  public $descricaoOutraCondicao2 = null;
  /**
   * @var string
   */
  public $descricaoOutraCondicao3 = null;
  /**
   * @var string
   */
  public $descricaoPlantasMedicinaisUsadas = null;
  /**
   * @var int[]
   */
  public $doencaCardiaca = null;
  /**
   * @var int[]
   */
  public $doencaRespiratoria = null;
  /**
   * @var int[]
   */
  public $doencaRins = null;
  /**
   * @var string
   */
  public $maternidadeDeReferencia = null;
  /**
   * @var int
   */
  public $situacaoPeso = null;
  /**
   * @var bool
   */
  public $statusEhDependenteAlcool = null;
  /**
   * @var bool
   */
  public $statusEhDependenteOutrasDrogas = null;
  /**
   * @var bool
   */
  public $statusEhFumante = null;
  /**
   * @var bool
   */
  public $statusEhGestante = null;
  /**
   * @var bool
   */
  public $statusEstaAcamado = null;
  /**
   * @var bool
   */
  public $statusEstaDomiciliado = null;
  /**
   * @var bool
   */
  public $statusTemDiabetes = null;
  /**
   * @var bool
   */
  public $statusTemDoencaRespiratoria = null;
  /**
   * @var bool
   */
  public $statusTemHanseniase = null;
  /**
   * @var bool
   */
  public $statusTemHipertensaoArterial = null;
  /**
   * @var bool
   */
  public $statusTemTeveCancer = null;
  /**
   * @var bool
   */
  public $statusTemTeveDoencasRins = null;
  /**
   * @var bool
   */
  public $statusTemTuberculose = null;
  /**
   * @var bool
   */
  public $statusTeveAvcDerrame = null;
  /**
   * @var bool
   */
  public $statusTeveDoencaCardiaca = null;
  /**
   * @var bool
   */
  public $statusTeveInfarto = null;
  /**
   * @var bool
   */
  public $statusTeveInternadoEm12Meses = null;
  /**
   * @var bool
   */
  public $statusUsaOutrasPraticasIntegrativasOuComplementares = null;
  /**
   * @var bool
   */
  public $statusUsaPlantaMedicinais = null;
  /**
   * @var bool
   */
  public $statusDiagnosticoMental = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'descricaoCausaInternacaoEm12Meses',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'descricaoOutraCondicao1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'descricaoOutraCondicao2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'descricaoOutraCondicao3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'descricaoPlantasMedicinaisUsadas',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'doencaCardiaca',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        7 => array(
          'var' => 'doencaRespiratoria',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        8 => array(
          'var' => 'doencaRins',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        9 => array(
          'var' => 'maternidadeDeReferencia',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'situacaoPeso',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'statusEhDependenteAlcool',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'statusEhDependenteOutrasDrogas',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'statusEhFumante',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'statusEhGestante',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'statusEstaAcamado',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'statusEstaDomiciliado',
          'type' => TType::BOOL,
          ),
        17 => array(
          'var' => 'statusTemDiabetes',
          'type' => TType::BOOL,
          ),
        18 => array(
          'var' => 'statusTemDoencaRespiratoria',
          'type' => TType::BOOL,
          ),
        19 => array(
          'var' => 'statusTemHanseniase',
          'type' => TType::BOOL,
          ),
        20 => array(
          'var' => 'statusTemHipertensaoArterial',
          'type' => TType::BOOL,
          ),
        21 => array(
          'var' => 'statusTemTeveCancer',
          'type' => TType::BOOL,
          ),
        22 => array(
          'var' => 'statusTemTeveDoencasRins',
          'type' => TType::BOOL,
          ),
        23 => array(
          'var' => 'statusTemTuberculose',
          'type' => TType::BOOL,
          ),
        24 => array(
          'var' => 'statusTeveAvcDerrame',
          'type' => TType::BOOL,
          ),
        25 => array(
          'var' => 'statusTeveDoencaCardiaca',
          'type' => TType::BOOL,
          ),
        26 => array(
          'var' => 'statusTeveInfarto',
          'type' => TType::BOOL,
          ),
        27 => array(
          'var' => 'statusTeveInternadoEm12Meses',
          'type' => TType::BOOL,
          ),
        29 => array(
          'var' => 'statusUsaOutrasPraticasIntegrativasOuComplementares',
          'type' => TType::BOOL,
          ),
        30 => array(
          'var' => 'statusUsaPlantaMedicinais',
          'type' => TType::BOOL,
          ),
        31 => array(
          'var' => 'statusDiagnosticoMental',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['descricaoCausaInternacaoEm12Meses'])) {
        $this->descricaoCausaInternacaoEm12Meses = $vals['descricaoCausaInternacaoEm12Meses'];
      }
      if (isset($vals['descricaoOutraCondicao1'])) {
        $this->descricaoOutraCondicao1 = $vals['descricaoOutraCondicao1'];
      }
      if (isset($vals['descricaoOutraCondicao2'])) {
        $this->descricaoOutraCondicao2 = $vals['descricaoOutraCondicao2'];
      }
      if (isset($vals['descricaoOutraCondicao3'])) {
        $this->descricaoOutraCondicao3 = $vals['descricaoOutraCondicao3'];
      }
      if (isset($vals['descricaoPlantasMedicinaisUsadas'])) {
        $this->descricaoPlantasMedicinaisUsadas = $vals['descricaoPlantasMedicinaisUsadas'];
      }
      if (isset($vals['doencaCardiaca'])) {
        $this->doencaCardiaca = $vals['doencaCardiaca'];
      }
      if (isset($vals['doencaRespiratoria'])) {
        $this->doencaRespiratoria = $vals['doencaRespiratoria'];
      }
      if (isset($vals['doencaRins'])) {
        $this->doencaRins = $vals['doencaRins'];
      }
      if (isset($vals['maternidadeDeReferencia'])) {
        $this->maternidadeDeReferencia = $vals['maternidadeDeReferencia'];
      }
      if (isset($vals['situacaoPeso'])) {
        $this->situacaoPeso = $vals['situacaoPeso'];
      }
      if (isset($vals['statusEhDependenteAlcool'])) {
        $this->statusEhDependenteAlcool = $vals['statusEhDependenteAlcool'];
      }
      if (isset($vals['statusEhDependenteOutrasDrogas'])) {
        $this->statusEhDependenteOutrasDrogas = $vals['statusEhDependenteOutrasDrogas'];
      }
      if (isset($vals['statusEhFumante'])) {
        $this->statusEhFumante = $vals['statusEhFumante'];
      }
      if (isset($vals['statusEhGestante'])) {
        $this->statusEhGestante = $vals['statusEhGestante'];
      }
      if (isset($vals['statusEstaAcamado'])) {
        $this->statusEstaAcamado = $vals['statusEstaAcamado'];
      }
      if (isset($vals['statusEstaDomiciliado'])) {
        $this->statusEstaDomiciliado = $vals['statusEstaDomiciliado'];
      }
      if (isset($vals['statusTemDiabetes'])) {
        $this->statusTemDiabetes = $vals['statusTemDiabetes'];
      }
      if (isset($vals['statusTemDoencaRespiratoria'])) {
        $this->statusTemDoencaRespiratoria = $vals['statusTemDoencaRespiratoria'];
      }
      if (isset($vals['statusTemHanseniase'])) {
        $this->statusTemHanseniase = $vals['statusTemHanseniase'];
      }
      if (isset($vals['statusTemHipertensaoArterial'])) {
        $this->statusTemHipertensaoArterial = $vals['statusTemHipertensaoArterial'];
      }
      if (isset($vals['statusTemTeveCancer'])) {
        $this->statusTemTeveCancer = $vals['statusTemTeveCancer'];
      }
      if (isset($vals['statusTemTeveDoencasRins'])) {
        $this->statusTemTeveDoencasRins = $vals['statusTemTeveDoencasRins'];
      }
      if (isset($vals['statusTemTuberculose'])) {
        $this->statusTemTuberculose = $vals['statusTemTuberculose'];
      }
      if (isset($vals['statusTeveAvcDerrame'])) {
        $this->statusTeveAvcDerrame = $vals['statusTeveAvcDerrame'];
      }
      if (isset($vals['statusTeveDoencaCardiaca'])) {
        $this->statusTeveDoencaCardiaca = $vals['statusTeveDoencaCardiaca'];
      }
      if (isset($vals['statusTeveInfarto'])) {
        $this->statusTeveInfarto = $vals['statusTeveInfarto'];
      }
      if (isset($vals['statusTeveInternadoEm12Meses'])) {
        $this->statusTeveInternadoEm12Meses = $vals['statusTeveInternadoEm12Meses'];
      }
      if (isset($vals['statusUsaOutrasPraticasIntegrativasOuComplementares'])) {
        $this->statusUsaOutrasPraticasIntegrativasOuComplementares = $vals['statusUsaOutrasPraticasIntegrativasOuComplementares'];
      }
      if (isset($vals['statusUsaPlantaMedicinais'])) {
        $this->statusUsaPlantaMedicinais = $vals['statusUsaPlantaMedicinais'];
      }
      if (isset($vals['statusDiagnosticoMental'])) {
        $this->statusDiagnosticoMental = $vals['statusDiagnosticoMental'];
      }
    }
  }

  public function getName() {
    return 'CondicoesDeSaudeThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descricaoCausaInternacaoEm12Meses);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descricaoOutraCondicao1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descricaoOutraCondicao2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descricaoOutraCondicao3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descricaoPlantasMedicinaisUsadas);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->doencaCardiaca = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->doencaCardiaca []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->doencaRespiratoria = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI64($elem11);
              $this->doencaRespiratoria []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->doencaRins = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI64($elem17);
              $this->doencaRins []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->maternidadeDeReferencia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->situacaoPeso);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEhDependenteAlcool);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEhDependenteOutrasDrogas);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEhFumante);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEhGestante);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEstaAcamado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEstaDomiciliado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemDiabetes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemDoencaRespiratoria);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemHanseniase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemHipertensaoArterial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemTeveCancer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemTeveDoencasRins);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemTuberculose);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTeveAvcDerrame);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTeveDoencaCardiaca);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTeveInfarto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTeveInternadoEm12Meses);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusUsaOutrasPraticasIntegrativasOuComplementares);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusUsaPlantaMedicinais);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusDiagnosticoMental);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CondicoesDeSaudeThrift');
    if ($this->descricaoCausaInternacaoEm12Meses !== null) {
      $xfer += $output->writeFieldBegin('descricaoCausaInternacaoEm12Meses', TType::STRING, 1);
      $xfer += $output->writeString($this->descricaoCausaInternacaoEm12Meses);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descricaoOutraCondicao1 !== null) {
      $xfer += $output->writeFieldBegin('descricaoOutraCondicao1', TType::STRING, 2);
      $xfer += $output->writeString($this->descricaoOutraCondicao1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descricaoOutraCondicao2 !== null) {
      $xfer += $output->writeFieldBegin('descricaoOutraCondicao2', TType::STRING, 3);
      $xfer += $output->writeString($this->descricaoOutraCondicao2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descricaoOutraCondicao3 !== null) {
      $xfer += $output->writeFieldBegin('descricaoOutraCondicao3', TType::STRING, 4);
      $xfer += $output->writeString($this->descricaoOutraCondicao3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descricaoPlantasMedicinaisUsadas !== null) {
      $xfer += $output->writeFieldBegin('descricaoPlantasMedicinaisUsadas', TType::STRING, 5);
      $xfer += $output->writeString($this->descricaoPlantasMedicinaisUsadas);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doencaCardiaca !== null) {
      if (!is_array($this->doencaCardiaca)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('doencaCardiaca', TType::LST, 6);
      {
        $output->writeListBegin(TType::I64, count($this->doencaCardiaca));
        {
          foreach ($this->doencaCardiaca as $iter18)
          {
            $xfer += $output->writeI64($iter18);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doencaRespiratoria !== null) {
      if (!is_array($this->doencaRespiratoria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('doencaRespiratoria', TType::LST, 7);
      {
        $output->writeListBegin(TType::I64, count($this->doencaRespiratoria));
        {
          foreach ($this->doencaRespiratoria as $iter19)
          {
            $xfer += $output->writeI64($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doencaRins !== null) {
      if (!is_array($this->doencaRins)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('doencaRins', TType::LST, 8);
      {
        $output->writeListBegin(TType::I64, count($this->doencaRins));
        {
          foreach ($this->doencaRins as $iter20)
          {
            $xfer += $output->writeI64($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maternidadeDeReferencia !== null) {
      $xfer += $output->writeFieldBegin('maternidadeDeReferencia', TType::STRING, 9);
      $xfer += $output->writeString($this->maternidadeDeReferencia);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->situacaoPeso !== null) {
      $xfer += $output->writeFieldBegin('situacaoPeso', TType::I64, 10);
      $xfer += $output->writeI64($this->situacaoPeso);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEhDependenteAlcool !== null) {
      $xfer += $output->writeFieldBegin('statusEhDependenteAlcool', TType::BOOL, 11);
      $xfer += $output->writeBool($this->statusEhDependenteAlcool);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEhDependenteOutrasDrogas !== null) {
      $xfer += $output->writeFieldBegin('statusEhDependenteOutrasDrogas', TType::BOOL, 12);
      $xfer += $output->writeBool($this->statusEhDependenteOutrasDrogas);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEhFumante !== null) {
      $xfer += $output->writeFieldBegin('statusEhFumante', TType::BOOL, 13);
      $xfer += $output->writeBool($this->statusEhFumante);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEhGestante !== null) {
      $xfer += $output->writeFieldBegin('statusEhGestante', TType::BOOL, 14);
      $xfer += $output->writeBool($this->statusEhGestante);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEstaAcamado !== null) {
      $xfer += $output->writeFieldBegin('statusEstaAcamado', TType::BOOL, 15);
      $xfer += $output->writeBool($this->statusEstaAcamado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEstaDomiciliado !== null) {
      $xfer += $output->writeFieldBegin('statusEstaDomiciliado', TType::BOOL, 16);
      $xfer += $output->writeBool($this->statusEstaDomiciliado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemDiabetes !== null) {
      $xfer += $output->writeFieldBegin('statusTemDiabetes', TType::BOOL, 17);
      $xfer += $output->writeBool($this->statusTemDiabetes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemDoencaRespiratoria !== null) {
      $xfer += $output->writeFieldBegin('statusTemDoencaRespiratoria', TType::BOOL, 18);
      $xfer += $output->writeBool($this->statusTemDoencaRespiratoria);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemHanseniase !== null) {
      $xfer += $output->writeFieldBegin('statusTemHanseniase', TType::BOOL, 19);
      $xfer += $output->writeBool($this->statusTemHanseniase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemHipertensaoArterial !== null) {
      $xfer += $output->writeFieldBegin('statusTemHipertensaoArterial', TType::BOOL, 20);
      $xfer += $output->writeBool($this->statusTemHipertensaoArterial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemTeveCancer !== null) {
      $xfer += $output->writeFieldBegin('statusTemTeveCancer', TType::BOOL, 21);
      $xfer += $output->writeBool($this->statusTemTeveCancer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemTeveDoencasRins !== null) {
      $xfer += $output->writeFieldBegin('statusTemTeveDoencasRins', TType::BOOL, 22);
      $xfer += $output->writeBool($this->statusTemTeveDoencasRins);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemTuberculose !== null) {
      $xfer += $output->writeFieldBegin('statusTemTuberculose', TType::BOOL, 23);
      $xfer += $output->writeBool($this->statusTemTuberculose);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTeveAvcDerrame !== null) {
      $xfer += $output->writeFieldBegin('statusTeveAvcDerrame', TType::BOOL, 24);
      $xfer += $output->writeBool($this->statusTeveAvcDerrame);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTeveDoencaCardiaca !== null) {
      $xfer += $output->writeFieldBegin('statusTeveDoencaCardiaca', TType::BOOL, 25);
      $xfer += $output->writeBool($this->statusTeveDoencaCardiaca);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTeveInfarto !== null) {
      $xfer += $output->writeFieldBegin('statusTeveInfarto', TType::BOOL, 26);
      $xfer += $output->writeBool($this->statusTeveInfarto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTeveInternadoEm12Meses !== null) {
      $xfer += $output->writeFieldBegin('statusTeveInternadoEm12Meses', TType::BOOL, 27);
      $xfer += $output->writeBool($this->statusTeveInternadoEm12Meses);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusUsaOutrasPraticasIntegrativasOuComplementares !== null) {
      $xfer += $output->writeFieldBegin('statusUsaOutrasPraticasIntegrativasOuComplementares', TType::BOOL, 29);
      $xfer += $output->writeBool($this->statusUsaOutrasPraticasIntegrativasOuComplementares);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusUsaPlantaMedicinais !== null) {
      $xfer += $output->writeFieldBegin('statusUsaPlantaMedicinais', TType::BOOL, 30);
      $xfer += $output->writeBool($this->statusUsaPlantaMedicinais);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusDiagnosticoMental !== null) {
      $xfer += $output->writeFieldBegin('statusDiagnosticoMental', TType::BOOL, 31);
      $xfer += $output->writeBool($this->statusDiagnosticoMental);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmSituacaoDeRuaThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $grauParentescoFamiliarFrequentado = null;
  /**
   * @var int[]
   */
  public $higienePessoalSituacaoRua = null;
  /**
   * @var int[]
   */
  public $origemAlimentoSituacaoRua = null;
  /**
   * @var string
   */
  public $outraInstituicaoQueAcompanha = null;
  /**
   * @var int
   */
  public $quantidadeAlimentacoesAoDiaSituacaoRua = null;
  /**
   * @var bool
   */
  public $statusAcompanhadoPorOutraInstituicao = null;
  /**
   * @var bool
   */
  public $statusPossuiReferenciaFamiliar = null;
  /**
   * @var bool
   */
  public $statusRecebeBeneficio = null;
  /**
   * @var bool
   */
  public $statusSituacaoRua = null;
  /**
   * @var bool
   */
  public $statusTemAcessoHigienePessoalSituacaoRua = null;
  /**
   * @var bool
   */
  public $statusVisitaFamiliarFrequentemente = null;
  /**
   * @var int
   */
  public $tempoSituacaoRua = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'grauParentescoFamiliarFrequentado',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'higienePessoalSituacaoRua',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'origemAlimentoSituacaoRua',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'outraInstituicaoQueAcompanha',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'quantidadeAlimentacoesAoDiaSituacaoRua',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'statusAcompanhadoPorOutraInstituicao',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'statusPossuiReferenciaFamiliar',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'statusRecebeBeneficio',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'statusSituacaoRua',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'statusTemAcessoHigienePessoalSituacaoRua',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'statusVisitaFamiliarFrequentemente',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'tempoSituacaoRua',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['grauParentescoFamiliarFrequentado'])) {
        $this->grauParentescoFamiliarFrequentado = $vals['grauParentescoFamiliarFrequentado'];
      }
      if (isset($vals['higienePessoalSituacaoRua'])) {
        $this->higienePessoalSituacaoRua = $vals['higienePessoalSituacaoRua'];
      }
      if (isset($vals['origemAlimentoSituacaoRua'])) {
        $this->origemAlimentoSituacaoRua = $vals['origemAlimentoSituacaoRua'];
      }
      if (isset($vals['outraInstituicaoQueAcompanha'])) {
        $this->outraInstituicaoQueAcompanha = $vals['outraInstituicaoQueAcompanha'];
      }
      if (isset($vals['quantidadeAlimentacoesAoDiaSituacaoRua'])) {
        $this->quantidadeAlimentacoesAoDiaSituacaoRua = $vals['quantidadeAlimentacoesAoDiaSituacaoRua'];
      }
      if (isset($vals['statusAcompanhadoPorOutraInstituicao'])) {
        $this->statusAcompanhadoPorOutraInstituicao = $vals['statusAcompanhadoPorOutraInstituicao'];
      }
      if (isset($vals['statusPossuiReferenciaFamiliar'])) {
        $this->statusPossuiReferenciaFamiliar = $vals['statusPossuiReferenciaFamiliar'];
      }
      if (isset($vals['statusRecebeBeneficio'])) {
        $this->statusRecebeBeneficio = $vals['statusRecebeBeneficio'];
      }
      if (isset($vals['statusSituacaoRua'])) {
        $this->statusSituacaoRua = $vals['statusSituacaoRua'];
      }
      if (isset($vals['statusTemAcessoHigienePessoalSituacaoRua'])) {
        $this->statusTemAcessoHigienePessoalSituacaoRua = $vals['statusTemAcessoHigienePessoalSituacaoRua'];
      }
      if (isset($vals['statusVisitaFamiliarFrequentemente'])) {
        $this->statusVisitaFamiliarFrequentemente = $vals['statusVisitaFamiliarFrequentemente'];
      }
      if (isset($vals['tempoSituacaoRua'])) {
        $this->tempoSituacaoRua = $vals['tempoSituacaoRua'];
      }
    }
  }

  public function getName() {
    return 'EmSituacaoDeRuaThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->grauParentescoFamiliarFrequentado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->higienePessoalSituacaoRua = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readI64($elem26);
              $this->higienePessoalSituacaoRua []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->origemAlimentoSituacaoRua = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $xfer += $input->readI64($elem32);
              $this->origemAlimentoSituacaoRua []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->outraInstituicaoQueAcompanha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->quantidadeAlimentacoesAoDiaSituacaoRua);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusAcompanhadoPorOutraInstituicao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusPossuiReferenciaFamiliar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusRecebeBeneficio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusSituacaoRua);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemAcessoHigienePessoalSituacaoRua);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusVisitaFamiliarFrequentemente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tempoSituacaoRua);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmSituacaoDeRuaThrift');
    if ($this->grauParentescoFamiliarFrequentado !== null) {
      $xfer += $output->writeFieldBegin('grauParentescoFamiliarFrequentado', TType::STRING, 1);
      $xfer += $output->writeString($this->grauParentescoFamiliarFrequentado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->higienePessoalSituacaoRua !== null) {
      if (!is_array($this->higienePessoalSituacaoRua)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('higienePessoalSituacaoRua', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->higienePessoalSituacaoRua));
        {
          foreach ($this->higienePessoalSituacaoRua as $iter33)
          {
            $xfer += $output->writeI64($iter33);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origemAlimentoSituacaoRua !== null) {
      if (!is_array($this->origemAlimentoSituacaoRua)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('origemAlimentoSituacaoRua', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->origemAlimentoSituacaoRua));
        {
          foreach ($this->origemAlimentoSituacaoRua as $iter34)
          {
            $xfer += $output->writeI64($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->outraInstituicaoQueAcompanha !== null) {
      $xfer += $output->writeFieldBegin('outraInstituicaoQueAcompanha', TType::STRING, 4);
      $xfer += $output->writeString($this->outraInstituicaoQueAcompanha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quantidadeAlimentacoesAoDiaSituacaoRua !== null) {
      $xfer += $output->writeFieldBegin('quantidadeAlimentacoesAoDiaSituacaoRua', TType::I64, 5);
      $xfer += $output->writeI64($this->quantidadeAlimentacoesAoDiaSituacaoRua);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusAcompanhadoPorOutraInstituicao !== null) {
      $xfer += $output->writeFieldBegin('statusAcompanhadoPorOutraInstituicao', TType::BOOL, 6);
      $xfer += $output->writeBool($this->statusAcompanhadoPorOutraInstituicao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusPossuiReferenciaFamiliar !== null) {
      $xfer += $output->writeFieldBegin('statusPossuiReferenciaFamiliar', TType::BOOL, 7);
      $xfer += $output->writeBool($this->statusPossuiReferenciaFamiliar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusRecebeBeneficio !== null) {
      $xfer += $output->writeFieldBegin('statusRecebeBeneficio', TType::BOOL, 8);
      $xfer += $output->writeBool($this->statusRecebeBeneficio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusSituacaoRua !== null) {
      $xfer += $output->writeFieldBegin('statusSituacaoRua', TType::BOOL, 9);
      $xfer += $output->writeBool($this->statusSituacaoRua);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemAcessoHigienePessoalSituacaoRua !== null) {
      $xfer += $output->writeFieldBegin('statusTemAcessoHigienePessoalSituacaoRua', TType::BOOL, 10);
      $xfer += $output->writeBool($this->statusTemAcessoHigienePessoalSituacaoRua);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusVisitaFamiliarFrequentemente !== null) {
      $xfer += $output->writeFieldBegin('statusVisitaFamiliarFrequentemente', TType::BOOL, 11);
      $xfer += $output->writeBool($this->statusVisitaFamiliarFrequentemente);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tempoSituacaoRua !== null) {
      $xfer += $output->writeFieldBegin('tempoSituacaoRua', TType::I64, 12);
      $xfer += $output->writeI64($this->tempoSituacaoRua);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentificacaoUsuarioCidadaoThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $nomeSocial = null;
  /**
   * @var string
   */
  public $codigoIbgeMunicipioNascimento = null;
  /**
   * @var int
   */
  public $dataNascimentoCidadao = null;
  /**
   * @var bool
   */
  public $desconheceNomeMae = null;
  /**
   * @var string
   */
  public $emailCidadao = null;
  /**
   * @var int
   */
  public $nacionalidadeCidadao = null;
  /**
   * @var string
   */
  public $nomeCidadao = null;
  /**
   * @var string
   */
  public $nomeMaeCidadao = null;
  /**
   * @var string
   */
  public $cnsCidadao = null;
  /**
   * @var string
   */
  public $cnsResponsavelFamiliar = null;
  /**
   * @var string
   */
  public $telefoneCelular = null;
  /**
   * @var string
   */
  public $numeroNisPisPasep = null;
  /**
   * @var int
   */
  public $paisNascimento = null;
  /**
   * @var int
   */
  public $racaCorCidadao = null;
  /**
   * @var int
   */
  public $sexoCidadao = null;
  /**
   * @var bool
   */
  public $statusEhResponsavel = null;
  /**
   * @var int
   */
  public $etnia = null;
  /**
   * @var string
   */
  public $nomePaiCidadao = null;
  /**
   * @var bool
   */
  public $desconheceNomePai = null;
  /**
   * @var int
   */
  public $dtNaturalizacao = null;
  /**
   * @var string
   */
  public $portariaNaturalizacao = null;
  /**
   * @var int
   */
  public $dtEntradaBrasil = null;
  /**
   * @var string
   */
  public $microArea = null;
  /**
   * @var bool
   */
  public $stForaArea = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nomeSocial',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'codigoIbgeMunicipioNascimento',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dataNascimentoCidadao',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'desconheceNomeMae',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'emailCidadao',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'nacionalidadeCidadao',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'nomeCidadao',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'nomeMaeCidadao',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'cnsCidadao',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'cnsResponsavelFamiliar',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'telefoneCelular',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'numeroNisPisPasep',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'paisNascimento',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'racaCorCidadao',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'sexoCidadao',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'statusEhResponsavel',
          'type' => TType::BOOL,
          ),
        18 => array(
          'var' => 'etnia',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'nomePaiCidadao',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'desconheceNomePai',
          'type' => TType::BOOL,
          ),
        21 => array(
          'var' => 'dtNaturalizacao',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'portariaNaturalizacao',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'dtEntradaBrasil',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'microArea',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'stForaArea',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nomeSocial'])) {
        $this->nomeSocial = $vals['nomeSocial'];
      }
      if (isset($vals['codigoIbgeMunicipioNascimento'])) {
        $this->codigoIbgeMunicipioNascimento = $vals['codigoIbgeMunicipioNascimento'];
      }
      if (isset($vals['dataNascimentoCidadao'])) {
        $this->dataNascimentoCidadao = $vals['dataNascimentoCidadao'];
      }
      if (isset($vals['desconheceNomeMae'])) {
        $this->desconheceNomeMae = $vals['desconheceNomeMae'];
      }
      if (isset($vals['emailCidadao'])) {
        $this->emailCidadao = $vals['emailCidadao'];
      }
      if (isset($vals['nacionalidadeCidadao'])) {
        $this->nacionalidadeCidadao = $vals['nacionalidadeCidadao'];
      }
      if (isset($vals['nomeCidadao'])) {
        $this->nomeCidadao = $vals['nomeCidadao'];
      }
      if (isset($vals['nomeMaeCidadao'])) {
        $this->nomeMaeCidadao = $vals['nomeMaeCidadao'];
      }
      if (isset($vals['cnsCidadao'])) {
        $this->cnsCidadao = $vals['cnsCidadao'];
      }
      if (isset($vals['cnsResponsavelFamiliar'])) {
        $this->cnsResponsavelFamiliar = $vals['cnsResponsavelFamiliar'];
      }
      if (isset($vals['telefoneCelular'])) {
        $this->telefoneCelular = $vals['telefoneCelular'];
      }
      if (isset($vals['numeroNisPisPasep'])) {
        $this->numeroNisPisPasep = $vals['numeroNisPisPasep'];
      }
      if (isset($vals['paisNascimento'])) {
        $this->paisNascimento = $vals['paisNascimento'];
      }
      if (isset($vals['racaCorCidadao'])) {
        $this->racaCorCidadao = $vals['racaCorCidadao'];
      }
      if (isset($vals['sexoCidadao'])) {
        $this->sexoCidadao = $vals['sexoCidadao'];
      }
      if (isset($vals['statusEhResponsavel'])) {
        $this->statusEhResponsavel = $vals['statusEhResponsavel'];
      }
      if (isset($vals['etnia'])) {
        $this->etnia = $vals['etnia'];
      }
      if (isset($vals['nomePaiCidadao'])) {
        $this->nomePaiCidadao = $vals['nomePaiCidadao'];
      }
      if (isset($vals['desconheceNomePai'])) {
        $this->desconheceNomePai = $vals['desconheceNomePai'];
      }
      if (isset($vals['dtNaturalizacao'])) {
        $this->dtNaturalizacao = $vals['dtNaturalizacao'];
      }
      if (isset($vals['portariaNaturalizacao'])) {
        $this->portariaNaturalizacao = $vals['portariaNaturalizacao'];
      }
      if (isset($vals['dtEntradaBrasil'])) {
        $this->dtEntradaBrasil = $vals['dtEntradaBrasil'];
      }
      if (isset($vals['microArea'])) {
        $this->microArea = $vals['microArea'];
      }
      if (isset($vals['stForaArea'])) {
        $this->stForaArea = $vals['stForaArea'];
      }
    }
  }

  public function getName() {
    return 'IdentificacaoUsuarioCidadaoThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeSocial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codigoIbgeMunicipioNascimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataNascimentoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->desconheceNomeMae);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->nacionalidadeCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomeMaeCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnsCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cnsResponsavelFamiliar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telefoneCelular);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numeroNisPisPasep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->paisNascimento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->racaCorCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sexoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusEhResponsavel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->etnia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nomePaiCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->desconheceNomePai);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dtNaturalizacao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->portariaNaturalizacao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dtEntradaBrasil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->microArea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->stForaArea);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentificacaoUsuarioCidadaoThrift');
    if ($this->nomeSocial !== null) {
      $xfer += $output->writeFieldBegin('nomeSocial', TType::STRING, 1);
      $xfer += $output->writeString($this->nomeSocial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codigoIbgeMunicipioNascimento !== null) {
      $xfer += $output->writeFieldBegin('codigoIbgeMunicipioNascimento', TType::STRING, 2);
      $xfer += $output->writeString($this->codigoIbgeMunicipioNascimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNascimentoCidadao !== null) {
      $xfer += $output->writeFieldBegin('dataNascimentoCidadao', TType::I64, 3);
      $xfer += $output->writeI64($this->dataNascimentoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desconheceNomeMae !== null) {
      $xfer += $output->writeFieldBegin('desconheceNomeMae', TType::BOOL, 5);
      $xfer += $output->writeBool($this->desconheceNomeMae);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCidadao !== null) {
      $xfer += $output->writeFieldBegin('emailCidadao', TType::STRING, 6);
      $xfer += $output->writeString($this->emailCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nacionalidadeCidadao !== null) {
      $xfer += $output->writeFieldBegin('nacionalidadeCidadao', TType::I64, 7);
      $xfer += $output->writeI64($this->nacionalidadeCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeCidadao !== null) {
      $xfer += $output->writeFieldBegin('nomeCidadao', TType::STRING, 8);
      $xfer += $output->writeString($this->nomeCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomeMaeCidadao !== null) {
      $xfer += $output->writeFieldBegin('nomeMaeCidadao', TType::STRING, 9);
      $xfer += $output->writeString($this->nomeMaeCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnsCidadao !== null) {
      $xfer += $output->writeFieldBegin('cnsCidadao', TType::STRING, 10);
      $xfer += $output->writeString($this->cnsCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cnsResponsavelFamiliar !== null) {
      $xfer += $output->writeFieldBegin('cnsResponsavelFamiliar', TType::STRING, 11);
      $xfer += $output->writeString($this->cnsResponsavelFamiliar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telefoneCelular !== null) {
      $xfer += $output->writeFieldBegin('telefoneCelular', TType::STRING, 12);
      $xfer += $output->writeString($this->telefoneCelular);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numeroNisPisPasep !== null) {
      $xfer += $output->writeFieldBegin('numeroNisPisPasep', TType::STRING, 13);
      $xfer += $output->writeString($this->numeroNisPisPasep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paisNascimento !== null) {
      $xfer += $output->writeFieldBegin('paisNascimento', TType::I64, 14);
      $xfer += $output->writeI64($this->paisNascimento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->racaCorCidadao !== null) {
      $xfer += $output->writeFieldBegin('racaCorCidadao', TType::I64, 15);
      $xfer += $output->writeI64($this->racaCorCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexoCidadao !== null) {
      $xfer += $output->writeFieldBegin('sexoCidadao', TType::I64, 16);
      $xfer += $output->writeI64($this->sexoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusEhResponsavel !== null) {
      $xfer += $output->writeFieldBegin('statusEhResponsavel', TType::BOOL, 17);
      $xfer += $output->writeBool($this->statusEhResponsavel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->etnia !== null) {
      $xfer += $output->writeFieldBegin('etnia', TType::I64, 18);
      $xfer += $output->writeI64($this->etnia);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomePaiCidadao !== null) {
      $xfer += $output->writeFieldBegin('nomePaiCidadao', TType::STRING, 19);
      $xfer += $output->writeString($this->nomePaiCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desconheceNomePai !== null) {
      $xfer += $output->writeFieldBegin('desconheceNomePai', TType::BOOL, 20);
      $xfer += $output->writeBool($this->desconheceNomePai);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dtNaturalizacao !== null) {
      $xfer += $output->writeFieldBegin('dtNaturalizacao', TType::I64, 21);
      $xfer += $output->writeI64($this->dtNaturalizacao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->portariaNaturalizacao !== null) {
      $xfer += $output->writeFieldBegin('portariaNaturalizacao', TType::STRING, 22);
      $xfer += $output->writeString($this->portariaNaturalizacao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dtEntradaBrasil !== null) {
      $xfer += $output->writeFieldBegin('dtEntradaBrasil', TType::I64, 23);
      $xfer += $output->writeI64($this->dtEntradaBrasil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->microArea !== null) {
      $xfer += $output->writeFieldBegin('microArea', TType::STRING, 24);
      $xfer += $output->writeString($this->microArea);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stForaArea !== null) {
      $xfer += $output->writeFieldBegin('stForaArea', TType::BOOL, 25);
      $xfer += $output->writeBool($this->stForaArea);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InformacoesSocioDemograficasThrift {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $deficienciasCidadao = null;
  /**
   * @var int
   */
  public $grauInstrucaoCidadao = null;
  /**
   * @var string
   */
  public $ocupacaoCodigoCbo2002 = null;
  /**
   * @var int
   */
  public $orientacaoSexualCidadao = null;
  /**
   * @var string
   */
  public $povoComunidadeTradicional = null;
  /**
   * @var int
   */
  public $relacaoParentescoCidadao = null;
  /**
   * @var int
   */
  public $situacaoMercadoTrabalhoCidadao = null;
  /**
   * @var bool
   */
  public $statusDesejaInformarOrientacaoSexual = null;
  /**
   * @var bool
   */
  public $statusFrequentaBenzedeira = null;
  /**
   * @var bool
   */
  public $statusFrequentaEscola = null;
  /**
   * @var bool
   */
  public $statusMembroPovoComunidadeTradicional = null;
  /**
   * @var bool
   */
  public $statusParticipaGrupoComunitario = null;
  /**
   * @var bool
   */
  public $statusPossuiPlanoSaudePrivado = null;
  /**
   * @var bool
   */
  public $statusTemAlgumaDeficiencia = null;
  /**
   * @var int
   */
  public $identidadeGeneroCidadao = null;
  /**
   * @var bool
   */
  public $statusDesejaInformarIdentidadeGenero = null;
  /**
   * @var int[]
   */
  public $responsavelPorCrianca = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deficienciasCidadao',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'grauInstrucaoCidadao',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ocupacaoCodigoCbo2002',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'orientacaoSexualCidadao',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'povoComunidadeTradicional',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'relacaoParentescoCidadao',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'situacaoMercadoTrabalhoCidadao',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'statusDesejaInformarOrientacaoSexual',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'statusFrequentaBenzedeira',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'statusFrequentaEscola',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'statusMembroPovoComunidadeTradicional',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'statusParticipaGrupoComunitario',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'statusPossuiPlanoSaudePrivado',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'statusTemAlgumaDeficiencia',
          'type' => TType::BOOL,
          ),
        17 => array(
          'var' => 'identidadeGeneroCidadao',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'statusDesejaInformarIdentidadeGenero',
          'type' => TType::BOOL,
          ),
        19 => array(
          'var' => 'responsavelPorCrianca',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deficienciasCidadao'])) {
        $this->deficienciasCidadao = $vals['deficienciasCidadao'];
      }
      if (isset($vals['grauInstrucaoCidadao'])) {
        $this->grauInstrucaoCidadao = $vals['grauInstrucaoCidadao'];
      }
      if (isset($vals['ocupacaoCodigoCbo2002'])) {
        $this->ocupacaoCodigoCbo2002 = $vals['ocupacaoCodigoCbo2002'];
      }
      if (isset($vals['orientacaoSexualCidadao'])) {
        $this->orientacaoSexualCidadao = $vals['orientacaoSexualCidadao'];
      }
      if (isset($vals['povoComunidadeTradicional'])) {
        $this->povoComunidadeTradicional = $vals['povoComunidadeTradicional'];
      }
      if (isset($vals['relacaoParentescoCidadao'])) {
        $this->relacaoParentescoCidadao = $vals['relacaoParentescoCidadao'];
      }
      if (isset($vals['situacaoMercadoTrabalhoCidadao'])) {
        $this->situacaoMercadoTrabalhoCidadao = $vals['situacaoMercadoTrabalhoCidadao'];
      }
      if (isset($vals['statusDesejaInformarOrientacaoSexual'])) {
        $this->statusDesejaInformarOrientacaoSexual = $vals['statusDesejaInformarOrientacaoSexual'];
      }
      if (isset($vals['statusFrequentaBenzedeira'])) {
        $this->statusFrequentaBenzedeira = $vals['statusFrequentaBenzedeira'];
      }
      if (isset($vals['statusFrequentaEscola'])) {
        $this->statusFrequentaEscola = $vals['statusFrequentaEscola'];
      }
      if (isset($vals['statusMembroPovoComunidadeTradicional'])) {
        $this->statusMembroPovoComunidadeTradicional = $vals['statusMembroPovoComunidadeTradicional'];
      }
      if (isset($vals['statusParticipaGrupoComunitario'])) {
        $this->statusParticipaGrupoComunitario = $vals['statusParticipaGrupoComunitario'];
      }
      if (isset($vals['statusPossuiPlanoSaudePrivado'])) {
        $this->statusPossuiPlanoSaudePrivado = $vals['statusPossuiPlanoSaudePrivado'];
      }
      if (isset($vals['statusTemAlgumaDeficiencia'])) {
        $this->statusTemAlgumaDeficiencia = $vals['statusTemAlgumaDeficiencia'];
      }
      if (isset($vals['identidadeGeneroCidadao'])) {
        $this->identidadeGeneroCidadao = $vals['identidadeGeneroCidadao'];
      }
      if (isset($vals['statusDesejaInformarIdentidadeGenero'])) {
        $this->statusDesejaInformarIdentidadeGenero = $vals['statusDesejaInformarIdentidadeGenero'];
      }
      if (isset($vals['responsavelPorCrianca'])) {
        $this->responsavelPorCrianca = $vals['responsavelPorCrianca'];
      }
    }
  }

  public function getName() {
    return 'InformacoesSocioDemograficasThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->deficienciasCidadao = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $xfer += $input->readI64($elem40);
              $this->deficienciasCidadao []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->grauInstrucaoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ocupacaoCodigoCbo2002);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orientacaoSexualCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->povoComunidadeTradicional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->relacaoParentescoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->situacaoMercadoTrabalhoCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusDesejaInformarOrientacaoSexual);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusFrequentaBenzedeira);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusFrequentaEscola);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusMembroPovoComunidadeTradicional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusParticipaGrupoComunitario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusPossuiPlanoSaudePrivado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTemAlgumaDeficiencia);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->identidadeGeneroCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusDesejaInformarIdentidadeGenero);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->responsavelPorCrianca = array();
            $_size41 = 0;
            $_etype44 = 0;
            $xfer += $input->readListBegin($_etype44, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $elem46 = null;
              $xfer += $input->readI64($elem46);
              $this->responsavelPorCrianca []= $elem46;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InformacoesSocioDemograficasThrift');
    if ($this->deficienciasCidadao !== null) {
      if (!is_array($this->deficienciasCidadao)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deficienciasCidadao', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->deficienciasCidadao));
        {
          foreach ($this->deficienciasCidadao as $iter47)
          {
            $xfer += $output->writeI64($iter47);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grauInstrucaoCidadao !== null) {
      $xfer += $output->writeFieldBegin('grauInstrucaoCidadao', TType::I64, 2);
      $xfer += $output->writeI64($this->grauInstrucaoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ocupacaoCodigoCbo2002 !== null) {
      $xfer += $output->writeFieldBegin('ocupacaoCodigoCbo2002', TType::STRING, 4);
      $xfer += $output->writeString($this->ocupacaoCodigoCbo2002);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orientacaoSexualCidadao !== null) {
      $xfer += $output->writeFieldBegin('orientacaoSexualCidadao', TType::I64, 5);
      $xfer += $output->writeI64($this->orientacaoSexualCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->povoComunidadeTradicional !== null) {
      $xfer += $output->writeFieldBegin('povoComunidadeTradicional', TType::STRING, 6);
      $xfer += $output->writeString($this->povoComunidadeTradicional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relacaoParentescoCidadao !== null) {
      $xfer += $output->writeFieldBegin('relacaoParentescoCidadao', TType::I64, 7);
      $xfer += $output->writeI64($this->relacaoParentescoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->situacaoMercadoTrabalhoCidadao !== null) {
      $xfer += $output->writeFieldBegin('situacaoMercadoTrabalhoCidadao', TType::I64, 9);
      $xfer += $output->writeI64($this->situacaoMercadoTrabalhoCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusDesejaInformarOrientacaoSexual !== null) {
      $xfer += $output->writeFieldBegin('statusDesejaInformarOrientacaoSexual', TType::BOOL, 10);
      $xfer += $output->writeBool($this->statusDesejaInformarOrientacaoSexual);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusFrequentaBenzedeira !== null) {
      $xfer += $output->writeFieldBegin('statusFrequentaBenzedeira', TType::BOOL, 11);
      $xfer += $output->writeBool($this->statusFrequentaBenzedeira);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusFrequentaEscola !== null) {
      $xfer += $output->writeFieldBegin('statusFrequentaEscola', TType::BOOL, 12);
      $xfer += $output->writeBool($this->statusFrequentaEscola);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMembroPovoComunidadeTradicional !== null) {
      $xfer += $output->writeFieldBegin('statusMembroPovoComunidadeTradicional', TType::BOOL, 13);
      $xfer += $output->writeBool($this->statusMembroPovoComunidadeTradicional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusParticipaGrupoComunitario !== null) {
      $xfer += $output->writeFieldBegin('statusParticipaGrupoComunitario', TType::BOOL, 14);
      $xfer += $output->writeBool($this->statusParticipaGrupoComunitario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusPossuiPlanoSaudePrivado !== null) {
      $xfer += $output->writeFieldBegin('statusPossuiPlanoSaudePrivado', TType::BOOL, 15);
      $xfer += $output->writeBool($this->statusPossuiPlanoSaudePrivado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTemAlgumaDeficiencia !== null) {
      $xfer += $output->writeFieldBegin('statusTemAlgumaDeficiencia', TType::BOOL, 16);
      $xfer += $output->writeBool($this->statusTemAlgumaDeficiencia);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identidadeGeneroCidadao !== null) {
      $xfer += $output->writeFieldBegin('identidadeGeneroCidadao', TType::I64, 17);
      $xfer += $output->writeI64($this->identidadeGeneroCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusDesejaInformarIdentidadeGenero !== null) {
      $xfer += $output->writeFieldBegin('statusDesejaInformarIdentidadeGenero', TType::BOOL, 18);
      $xfer += $output->writeBool($this->statusDesejaInformarIdentidadeGenero);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->responsavelPorCrianca !== null) {
      if (!is_array($this->responsavelPorCrianca)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('responsavelPorCrianca', TType::LST, 19);
      {
        $output->writeListBegin(TType::I64, count($this->responsavelPorCrianca));
        {
          foreach ($this->responsavelPorCrianca as $iter48)
          {
            $xfer += $output->writeI64($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SaidaCidadaoCadastroThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $motivoSaidaCidadao = null;
  /**
   * @var int
   */
  public $dataObito = null;
  /**
   * @var string
   */
  public $numeroDO = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'motivoSaidaCidadao',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'dataObito',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'numeroDO',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['motivoSaidaCidadao'])) {
        $this->motivoSaidaCidadao = $vals['motivoSaidaCidadao'];
      }
      if (isset($vals['dataObito'])) {
        $this->dataObito = $vals['dataObito'];
      }
      if (isset($vals['numeroDO'])) {
        $this->numeroDO = $vals['numeroDO'];
      }
    }
  }

  public function getName() {
    return 'SaidaCidadaoCadastroThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->motivoSaidaCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dataObito);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->numeroDO);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SaidaCidadaoCadastroThrift');
    if ($this->motivoSaidaCidadao !== null) {
      $xfer += $output->writeFieldBegin('motivoSaidaCidadao', TType::I64, 1);
      $xfer += $output->writeI64($this->motivoSaidaCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataObito !== null) {
      $xfer += $output->writeFieldBegin('dataObito', TType::I64, 2);
      $xfer += $output->writeI64($this->dataObito);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numeroDO !== null) {
      $xfer += $output->writeFieldBegin('numeroDO', TType::STRING, 3);
      $xfer += $output->writeString($this->numeroDO);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CadastroIndividualThrift {
  static $_TSPEC;

  /**
   * @var \br\gov\saude\esusab\ras\cadastroindividual\CondicoesDeSaudeThrift
   */
  public $condicoesDeSaude = null;
  /**
   * @var \br\gov\saude\esusab\ras\cadastroindividual\EmSituacaoDeRuaThrift
   */
  public $emSituacaoDeRua = null;
  /**
   * @var bool
   */
  public $fichaAtualizada = null;
  /**
   * @var \br\gov\saude\esusab\ras\cadastroindividual\IdentificacaoUsuarioCidadaoThrift
   */
  public $identificacaoUsuarioCidadao = null;
  /**
   * @var \br\gov\saude\esusab\ras\cadastroindividual\InformacoesSocioDemograficasThrift
   */
  public $informacoesSocioDemograficas = null;
  /**
   * @var bool
   */
  public $statusTermoRecusaCadastroIndividualAtencaoBasica = null;
  /**
   * @var int
   */
  public $tpCdsOrigem = null;
  /**
   * @var string
   */
  public $uuid = null;
  /**
   * @var string
   */
  public $uuidFichaOriginadora = null;
  /**
   * @var string
   */
  public $uuidCidadao = null;
  /**
   * @var \br\gov\saude\esusab\ras\cadastroindividual\SaidaCidadaoCadastroThrift
   */
  public $saidaCidadaoCadastro = null;
  /**
   * @var \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift
   */
  public $headerTransport = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'condicoesDeSaude',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\cadastroindividual\CondicoesDeSaudeThrift',
          ),
        3 => array(
          'var' => 'emSituacaoDeRua',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\cadastroindividual\EmSituacaoDeRuaThrift',
          ),
        4 => array(
          'var' => 'fichaAtualizada',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'identificacaoUsuarioCidadao',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\cadastroindividual\IdentificacaoUsuarioCidadaoThrift',
          ),
        6 => array(
          'var' => 'informacoesSocioDemograficas',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\cadastroindividual\InformacoesSocioDemograficasThrift',
          ),
        7 => array(
          'var' => 'statusTermoRecusaCadastroIndividualAtencaoBasica',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'tpCdsOrigem',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'uuidFichaOriginadora',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'uuidCidadao',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'saidaCidadaoCadastro',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\cadastroindividual\SaidaCidadaoCadastroThrift',
          ),
        13 => array(
          'var' => 'headerTransport',
          'type' => TType::STRUCT,
          'class' => '\br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['condicoesDeSaude'])) {
        $this->condicoesDeSaude = $vals['condicoesDeSaude'];
      }
      if (isset($vals['emSituacaoDeRua'])) {
        $this->emSituacaoDeRua = $vals['emSituacaoDeRua'];
      }
      if (isset($vals['fichaAtualizada'])) {
        $this->fichaAtualizada = $vals['fichaAtualizada'];
      }
      if (isset($vals['identificacaoUsuarioCidadao'])) {
        $this->identificacaoUsuarioCidadao = $vals['identificacaoUsuarioCidadao'];
      }
      if (isset($vals['informacoesSocioDemograficas'])) {
        $this->informacoesSocioDemograficas = $vals['informacoesSocioDemograficas'];
      }
      if (isset($vals['statusTermoRecusaCadastroIndividualAtencaoBasica'])) {
        $this->statusTermoRecusaCadastroIndividualAtencaoBasica = $vals['statusTermoRecusaCadastroIndividualAtencaoBasica'];
      }
      if (isset($vals['tpCdsOrigem'])) {
        $this->tpCdsOrigem = $vals['tpCdsOrigem'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['uuidFichaOriginadora'])) {
        $this->uuidFichaOriginadora = $vals['uuidFichaOriginadora'];
      }
      if (isset($vals['uuidCidadao'])) {
        $this->uuidCidadao = $vals['uuidCidadao'];
      }
      if (isset($vals['saidaCidadaoCadastro'])) {
        $this->saidaCidadaoCadastro = $vals['saidaCidadaoCadastro'];
      }
      if (isset($vals['headerTransport'])) {
        $this->headerTransport = $vals['headerTransport'];
      }
    }
  }

  public function getName() {
    return 'CadastroIndividualThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->condicoesDeSaude = new \br\gov\saude\esusab\ras\cadastroindividual\CondicoesDeSaudeThrift();
            $xfer += $this->condicoesDeSaude->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->emSituacaoDeRua = new \br\gov\saude\esusab\ras\cadastroindividual\EmSituacaoDeRuaThrift();
            $xfer += $this->emSituacaoDeRua->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->fichaAtualizada);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->identificacaoUsuarioCidadao = new \br\gov\saude\esusab\ras\cadastroindividual\IdentificacaoUsuarioCidadaoThrift();
            $xfer += $this->identificacaoUsuarioCidadao->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->informacoesSocioDemograficas = new \br\gov\saude\esusab\ras\cadastroindividual\InformacoesSocioDemograficasThrift();
            $xfer += $this->informacoesSocioDemograficas->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTermoRecusaCadastroIndividualAtencaoBasica);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tpCdsOrigem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidFichaOriginadora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuidCidadao);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->saidaCidadaoCadastro = new \br\gov\saude\esusab\ras\cadastroindividual\SaidaCidadaoCadastroThrift();
            $xfer += $this->saidaCidadaoCadastro->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->headerTransport = new \br\gov\saude\esusab\ras\common\UnicaLotacaoHeaderThrift();
            $xfer += $this->headerTransport->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CadastroIndividualThrift');
    if ($this->condicoesDeSaude !== null) {
      if (!is_object($this->condicoesDeSaude)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condicoesDeSaude', TType::STRUCT, 1);
      $xfer += $this->condicoesDeSaude->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emSituacaoDeRua !== null) {
      if (!is_object($this->emSituacaoDeRua)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emSituacaoDeRua', TType::STRUCT, 3);
      $xfer += $this->emSituacaoDeRua->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fichaAtualizada !== null) {
      $xfer += $output->writeFieldBegin('fichaAtualizada', TType::BOOL, 4);
      $xfer += $output->writeBool($this->fichaAtualizada);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identificacaoUsuarioCidadao !== null) {
      if (!is_object($this->identificacaoUsuarioCidadao)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('identificacaoUsuarioCidadao', TType::STRUCT, 5);
      $xfer += $this->identificacaoUsuarioCidadao->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->informacoesSocioDemograficas !== null) {
      if (!is_object($this->informacoesSocioDemograficas)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('informacoesSocioDemograficas', TType::STRUCT, 6);
      $xfer += $this->informacoesSocioDemograficas->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTermoRecusaCadastroIndividualAtencaoBasica !== null) {
      $xfer += $output->writeFieldBegin('statusTermoRecusaCadastroIndividualAtencaoBasica', TType::BOOL, 7);
      $xfer += $output->writeBool($this->statusTermoRecusaCadastroIndividualAtencaoBasica);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tpCdsOrigem !== null) {
      $xfer += $output->writeFieldBegin('tpCdsOrigem', TType::I32, 8);
      $xfer += $output->writeI32($this->tpCdsOrigem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 9);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuidFichaOriginadora !== null) {
      $xfer += $output->writeFieldBegin('uuidFichaOriginadora', TType::STRING, 10);
      $xfer += $output->writeString($this->uuidFichaOriginadora);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuidCidadao !== null) {
      $xfer += $output->writeFieldBegin('uuidCidadao', TType::STRING, 11);
      $xfer += $output->writeString($this->uuidCidadao);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saidaCidadaoCadastro !== null) {
      if (!is_object($this->saidaCidadaoCadastro)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('saidaCidadaoCadastro', TType::STRUCT, 12);
      $xfer += $this->saidaCidadaoCadastro->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headerTransport !== null) {
      if (!is_object($this->headerTransport)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('headerTransport', TType::STRUCT, 13);
      $xfer += $this->headerTransport->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


